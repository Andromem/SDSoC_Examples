// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_accel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125001,HLS_SYN_LAT=2425110,HLS_SYN_TPT=none,HLS_SYN_MEM=390,HLS_SYN_DSP=8,HLS_SYN_FF=4502,HLS_SYN_LUT=3157}" *)

module mmult_accel (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_a_AWVALID,
        m_axi_a_AWREADY,
        m_axi_a_AWADDR,
        m_axi_a_AWID,
        m_axi_a_AWLEN,
        m_axi_a_AWSIZE,
        m_axi_a_AWBURST,
        m_axi_a_AWLOCK,
        m_axi_a_AWCACHE,
        m_axi_a_AWPROT,
        m_axi_a_AWQOS,
        m_axi_a_AWREGION,
        m_axi_a_AWUSER,
        m_axi_a_WVALID,
        m_axi_a_WREADY,
        m_axi_a_WDATA,
        m_axi_a_WSTRB,
        m_axi_a_WLAST,
        m_axi_a_WID,
        m_axi_a_WUSER,
        m_axi_a_ARVALID,
        m_axi_a_ARREADY,
        m_axi_a_ARADDR,
        m_axi_a_ARID,
        m_axi_a_ARLEN,
        m_axi_a_ARSIZE,
        m_axi_a_ARBURST,
        m_axi_a_ARLOCK,
        m_axi_a_ARCACHE,
        m_axi_a_ARPROT,
        m_axi_a_ARQOS,
        m_axi_a_ARREGION,
        m_axi_a_ARUSER,
        m_axi_a_RVALID,
        m_axi_a_RREADY,
        m_axi_a_RDATA,
        m_axi_a_RLAST,
        m_axi_a_RID,
        m_axi_a_RUSER,
        m_axi_a_RRESP,
        m_axi_a_BVALID,
        m_axi_a_BREADY,
        m_axi_a_BRESP,
        m_axi_a_BID,
        m_axi_a_BUSER,
        m_axi_b_AWVALID,
        m_axi_b_AWREADY,
        m_axi_b_AWADDR,
        m_axi_b_AWID,
        m_axi_b_AWLEN,
        m_axi_b_AWSIZE,
        m_axi_b_AWBURST,
        m_axi_b_AWLOCK,
        m_axi_b_AWCACHE,
        m_axi_b_AWPROT,
        m_axi_b_AWQOS,
        m_axi_b_AWREGION,
        m_axi_b_AWUSER,
        m_axi_b_WVALID,
        m_axi_b_WREADY,
        m_axi_b_WDATA,
        m_axi_b_WSTRB,
        m_axi_b_WLAST,
        m_axi_b_WID,
        m_axi_b_WUSER,
        m_axi_b_ARVALID,
        m_axi_b_ARREADY,
        m_axi_b_ARADDR,
        m_axi_b_ARID,
        m_axi_b_ARLEN,
        m_axi_b_ARSIZE,
        m_axi_b_ARBURST,
        m_axi_b_ARLOCK,
        m_axi_b_ARCACHE,
        m_axi_b_ARPROT,
        m_axi_b_ARQOS,
        m_axi_b_ARREGION,
        m_axi_b_ARUSER,
        m_axi_b_RVALID,
        m_axi_b_RREADY,
        m_axi_b_RDATA,
        m_axi_b_RLAST,
        m_axi_b_RID,
        m_axi_b_RUSER,
        m_axi_b_RRESP,
        m_axi_b_BVALID,
        m_axi_b_BREADY,
        m_axi_b_BRESP,
        m_axi_b_BID,
        m_axi_b_BUSER,
        m_axi_c_AWVALID,
        m_axi_c_AWREADY,
        m_axi_c_AWADDR,
        m_axi_c_AWID,
        m_axi_c_AWLEN,
        m_axi_c_AWSIZE,
        m_axi_c_AWBURST,
        m_axi_c_AWLOCK,
        m_axi_c_AWCACHE,
        m_axi_c_AWPROT,
        m_axi_c_AWQOS,
        m_axi_c_AWREGION,
        m_axi_c_AWUSER,
        m_axi_c_WVALID,
        m_axi_c_WREADY,
        m_axi_c_WDATA,
        m_axi_c_WSTRB,
        m_axi_c_WLAST,
        m_axi_c_WID,
        m_axi_c_WUSER,
        m_axi_c_ARVALID,
        m_axi_c_ARREADY,
        m_axi_c_ARADDR,
        m_axi_c_ARID,
        m_axi_c_ARLEN,
        m_axi_c_ARSIZE,
        m_axi_c_ARBURST,
        m_axi_c_ARLOCK,
        m_axi_c_ARCACHE,
        m_axi_c_ARPROT,
        m_axi_c_ARQOS,
        m_axi_c_ARREGION,
        m_axi_c_ARUSER,
        m_axi_c_RVALID,
        m_axi_c_RREADY,
        m_axi_c_RDATA,
        m_axi_c_RLAST,
        m_axi_c_RID,
        m_axi_c_RUSER,
        m_axi_c_RRESP,
        m_axi_c_BVALID,
        m_axi_c_BREADY,
        m_axi_c_BRESP,
        m_axi_c_BID,
        m_axi_c_BUSER,
        a_offset,
        b_offset,
        c_offset,
        size
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_pp0_stage0 = 30'd2097152;
parameter    ap_ST_fsm_state27 = 30'd4194304;
parameter    ap_ST_fsm_state28 = 30'd8388608;
parameter    ap_ST_fsm_state29 = 30'd16777216;
parameter    ap_ST_fsm_state30 = 30'd33554432;
parameter    ap_ST_fsm_state31 = 30'd67108864;
parameter    ap_ST_fsm_state32 = 30'd134217728;
parameter    ap_ST_fsm_state33 = 30'd268435456;
parameter    ap_ST_fsm_state34 = 30'd536870912;
parameter    C_M_AXI_A_ID_WIDTH = 1;
parameter    C_M_AXI_A_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_DATA_WIDTH = 32;
parameter    C_M_AXI_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUSER_WIDTH = 1;
parameter    C_M_AXI_A_USER_VALUE = 0;
parameter    C_M_AXI_A_PROT_VALUE = 0;
parameter    C_M_AXI_A_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_B_ID_WIDTH = 1;
parameter    C_M_AXI_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_B_DATA_WIDTH = 32;
parameter    C_M_AXI_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_USER_VALUE = 0;
parameter    C_M_AXI_B_PROT_VALUE = 0;
parameter    C_M_AXI_B_CACHE_VALUE = 3;
parameter    C_M_AXI_C_ID_WIDTH = 1;
parameter    C_M_AXI_C_ADDR_WIDTH = 32;
parameter    C_M_AXI_C_DATA_WIDTH = 32;
parameter    C_M_AXI_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_C_USER_VALUE = 0;
parameter    C_M_AXI_C_PROT_VALUE = 0;
parameter    C_M_AXI_C_CACHE_VALUE = 3;

parameter C_M_AXI_A_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_C_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_a_AWVALID;
input   m_axi_a_AWREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_AWADDR;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_AWID;
output  [7:0] m_axi_a_AWLEN;
output  [2:0] m_axi_a_AWSIZE;
output  [1:0] m_axi_a_AWBURST;
output  [1:0] m_axi_a_AWLOCK;
output  [3:0] m_axi_a_AWCACHE;
output  [2:0] m_axi_a_AWPROT;
output  [3:0] m_axi_a_AWQOS;
output  [3:0] m_axi_a_AWREGION;
output  [C_M_AXI_A_AWUSER_WIDTH - 1:0] m_axi_a_AWUSER;
output   m_axi_a_WVALID;
input   m_axi_a_WREADY;
output  [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_WDATA;
output  [C_M_AXI_A_WSTRB_WIDTH - 1:0] m_axi_a_WSTRB;
output   m_axi_a_WLAST;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_WID;
output  [C_M_AXI_A_WUSER_WIDTH - 1:0] m_axi_a_WUSER;
output   m_axi_a_ARVALID;
input   m_axi_a_ARREADY;
output  [C_M_AXI_A_ADDR_WIDTH - 1:0] m_axi_a_ARADDR;
output  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_ARID;
output  [7:0] m_axi_a_ARLEN;
output  [2:0] m_axi_a_ARSIZE;
output  [1:0] m_axi_a_ARBURST;
output  [1:0] m_axi_a_ARLOCK;
output  [3:0] m_axi_a_ARCACHE;
output  [2:0] m_axi_a_ARPROT;
output  [3:0] m_axi_a_ARQOS;
output  [3:0] m_axi_a_ARREGION;
output  [C_M_AXI_A_ARUSER_WIDTH - 1:0] m_axi_a_ARUSER;
input   m_axi_a_RVALID;
output   m_axi_a_RREADY;
input  [C_M_AXI_A_DATA_WIDTH - 1:0] m_axi_a_RDATA;
input   m_axi_a_RLAST;
input  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_RID;
input  [C_M_AXI_A_RUSER_WIDTH - 1:0] m_axi_a_RUSER;
input  [1:0] m_axi_a_RRESP;
input   m_axi_a_BVALID;
output   m_axi_a_BREADY;
input  [1:0] m_axi_a_BRESP;
input  [C_M_AXI_A_ID_WIDTH - 1:0] m_axi_a_BID;
input  [C_M_AXI_A_BUSER_WIDTH - 1:0] m_axi_a_BUSER;
output   m_axi_b_AWVALID;
input   m_axi_b_AWREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_AWADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_AWID;
output  [7:0] m_axi_b_AWLEN;
output  [2:0] m_axi_b_AWSIZE;
output  [1:0] m_axi_b_AWBURST;
output  [1:0] m_axi_b_AWLOCK;
output  [3:0] m_axi_b_AWCACHE;
output  [2:0] m_axi_b_AWPROT;
output  [3:0] m_axi_b_AWQOS;
output  [3:0] m_axi_b_AWREGION;
output  [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_b_AWUSER;
output   m_axi_b_WVALID;
input   m_axi_b_WREADY;
output  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_WDATA;
output  [C_M_AXI_B_WSTRB_WIDTH - 1:0] m_axi_b_WSTRB;
output   m_axi_b_WLAST;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_WID;
output  [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_b_WUSER;
output   m_axi_b_ARVALID;
input   m_axi_b_ARREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_b_ARADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_ARID;
output  [7:0] m_axi_b_ARLEN;
output  [2:0] m_axi_b_ARSIZE;
output  [1:0] m_axi_b_ARBURST;
output  [1:0] m_axi_b_ARLOCK;
output  [3:0] m_axi_b_ARCACHE;
output  [2:0] m_axi_b_ARPROT;
output  [3:0] m_axi_b_ARQOS;
output  [3:0] m_axi_b_ARREGION;
output  [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_b_ARUSER;
input   m_axi_b_RVALID;
output   m_axi_b_RREADY;
input  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_b_RDATA;
input   m_axi_b_RLAST;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_RID;
input  [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_b_RUSER;
input  [1:0] m_axi_b_RRESP;
input   m_axi_b_BVALID;
output   m_axi_b_BREADY;
input  [1:0] m_axi_b_BRESP;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_b_BID;
input  [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_b_BUSER;
output   m_axi_c_AWVALID;
input   m_axi_c_AWREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_AWADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_AWID;
output  [7:0] m_axi_c_AWLEN;
output  [2:0] m_axi_c_AWSIZE;
output  [1:0] m_axi_c_AWBURST;
output  [1:0] m_axi_c_AWLOCK;
output  [3:0] m_axi_c_AWCACHE;
output  [2:0] m_axi_c_AWPROT;
output  [3:0] m_axi_c_AWQOS;
output  [3:0] m_axi_c_AWREGION;
output  [C_M_AXI_C_AWUSER_WIDTH - 1:0] m_axi_c_AWUSER;
output   m_axi_c_WVALID;
input   m_axi_c_WREADY;
output  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_WDATA;
output  [C_M_AXI_C_WSTRB_WIDTH - 1:0] m_axi_c_WSTRB;
output   m_axi_c_WLAST;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_WID;
output  [C_M_AXI_C_WUSER_WIDTH - 1:0] m_axi_c_WUSER;
output   m_axi_c_ARVALID;
input   m_axi_c_ARREADY;
output  [C_M_AXI_C_ADDR_WIDTH - 1:0] m_axi_c_ARADDR;
output  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_ARID;
output  [7:0] m_axi_c_ARLEN;
output  [2:0] m_axi_c_ARSIZE;
output  [1:0] m_axi_c_ARBURST;
output  [1:0] m_axi_c_ARLOCK;
output  [3:0] m_axi_c_ARCACHE;
output  [2:0] m_axi_c_ARPROT;
output  [3:0] m_axi_c_ARQOS;
output  [3:0] m_axi_c_ARREGION;
output  [C_M_AXI_C_ARUSER_WIDTH - 1:0] m_axi_c_ARUSER;
input   m_axi_c_RVALID;
output   m_axi_c_RREADY;
input  [C_M_AXI_C_DATA_WIDTH - 1:0] m_axi_c_RDATA;
input   m_axi_c_RLAST;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_RID;
input  [C_M_AXI_C_RUSER_WIDTH - 1:0] m_axi_c_RUSER;
input  [1:0] m_axi_c_RRESP;
input   m_axi_c_BVALID;
output   m_axi_c_BREADY;
input  [1:0] m_axi_c_BRESP;
input  [C_M_AXI_C_ID_WIDTH - 1:0] m_axi_c_BID;
input  [C_M_AXI_C_BUSER_WIDTH - 1:0] m_axi_c_BUSER;
input  [31:0] a_offset;
input  [31:0] b_offset;
input  [31:0] c_offset;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    a_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_1_fu_479_p2;
reg    b_blk_n_AR;
reg    b_blk_n_R;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_6_fu_558_p2;
reg    c_blk_n_AW;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_s_fu_618_p2;
reg    c_blk_n_W;
wire    ap_CS_fsm_state30;
reg    c_blk_n_B;
wire    ap_CS_fsm_state34;
wire    a_AWREADY;
wire    a_WREADY;
reg    a_ARVALID;
wire    a_ARREADY;
wire    a_RVALID;
reg    a_RREADY;
wire   [31:0] a_RDATA;
wire    a_RLAST;
wire   [0:0] a_RID;
wire   [0:0] a_RUSER;
wire   [1:0] a_RRESP;
wire    a_BVALID;
wire   [1:0] a_BRESP;
wire   [0:0] a_BID;
wire   [0:0] a_BUSER;
wire    b_AWREADY;
wire    b_WREADY;
reg    b_ARVALID;
wire    b_ARREADY;
wire    b_RVALID;
reg    b_RREADY;
wire   [31:0] b_RDATA;
wire    b_RLAST;
wire   [0:0] b_RID;
wire   [0:0] b_RUSER;
wire   [1:0] b_RRESP;
wire    b_BVALID;
wire   [1:0] b_BRESP;
wire   [0:0] b_BID;
wire   [0:0] b_BUSER;
reg    c_AWVALID;
wire    c_AWREADY;
reg    c_WVALID;
wire    c_WREADY;
wire    c_ARREADY;
wire    c_RVALID;
wire   [31:0] c_RDATA;
wire    c_RLAST;
wire   [0:0] c_RID;
wire   [0:0] c_RUSER;
wire   [1:0] c_RRESP;
wire    c_BVALID;
reg    c_BREADY;
wire   [1:0] c_BRESP;
wire   [0:0] c_BID;
wire   [0:0] c_BUSER;
reg   [31:0] result_reg_315;
reg   [31:0] k_reg_328;
wire   [31:0] grp_fu_372_p2;
reg   [31:0] matrix_size_reg_799;
wire    ap_CS_fsm_state2;
reg    ap_sig_ioackin_a_ARREADY;
reg   [31:0] c_addr_reg_815;
wire    ap_CS_fsm_state9;
reg   [31:0] b_addr_reg_820;
wire   [31:0] tmp_fu_439_p2;
reg   [31:0] tmp_reg_826;
reg   [15:0] bufa_addr_reg_833;
reg    ap_block_state10;
reg    ap_sig_ioackin_b_ARREADY;
reg    ap_block_state10_io;
wire   [30:0] i_1_fu_484_p2;
reg   [30:0] i_1_reg_841;
reg   [31:0] tmpData_a_reg_846;
wire   [16:0] y_1_fu_507_p3;
reg   [16:0] y_1_reg_851;
wire   [16:0] x_1_fu_515_p3;
reg   [16:0] x_1_reg_856;
reg   [15:0] bufb_addr_reg_861;
reg    ap_block_state18;
wire   [30:0] i_2_fu_563_p2;
reg   [30:0] i_2_reg_869;
reg   [31:0] tmpData_b_reg_874;
wire   [16:0] y_4_fu_586_p3;
reg   [16:0] y_4_reg_879;
wire   [16:0] x_4_fu_594_p3;
reg   [16:0] x_4_reg_884;
wire   [17:0] tmp_24_cast_fu_610_p3;
reg   [17:0] tmp_24_cast_reg_889;
reg    ap_sig_ioackin_c_AWREADY;
reg    ap_block_state20_io;
wire   [30:0] row_1_fu_623_p2;
reg   [30:0] row_1_reg_898;
wire   [17:0] col_cast_cast_fu_633_p1;
reg   [17:0] col_cast_cast_reg_903;
wire    ap_CS_fsm_state21;
reg   [15:0] bufc_addr_1_reg_908;
wire   [0:0] exitcond1_fu_647_p2;
wire   [16:0] col_1_fu_652_p2;
reg   [16:0] col_1_reg_917;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state22_pp0_stage0_iter0;
wire    ap_block_state23_pp0_stage0_iter1;
wire    ap_block_state24_pp0_stage0_iter2;
wire    ap_block_state25_pp0_stage0_iter3;
wire    ap_block_state26_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond_fu_694_p2;
reg   [0:0] exitcond_reg_932;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_932;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_932;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_932;
wire   [31:0] k_1_fu_699_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] bufa_q0;
reg  signed [31:0] bufa_load_reg_941;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] bufb_q0;
reg  signed [31:0] bufb_load_reg_946;
wire   [31:0] grp_fu_705_p2;
reg   [31:0] tmp_5_reg_951;
wire   [31:0] result_1_fu_709_p2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state28;
wire   [30:0] i_3_fu_750_p2;
reg   [30:0] i_3_reg_969;
wire   [31:0] m_1_fu_773_p3;
reg   [31:0] m_1_reg_974;
wire   [0:0] tmp_3_fu_745_p2;
wire   [31:0] n_1_fu_781_p3;
reg   [31:0] n_1_reg_979;
wire   [31:0] bufc_q0;
reg   [31:0] tmpData_c_reg_984;
wire    ap_CS_fsm_state29;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state22;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] bufa_address0;
reg    bufa_ce0;
reg    bufa_we0;
reg   [15:0] bufb_address0;
reg    bufb_ce0;
reg    bufb_we0;
reg   [15:0] bufc_address0;
reg    bufc_ce0;
reg    bufc_we0;
reg   [30:0] i_reg_227;
wire    ap_CS_fsm_state11;
reg   [16:0] y_reg_238;
reg   [16:0] x_reg_249;
reg   [16:0] y3_reg_260;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state17;
reg   [16:0] x2_reg_271;
reg   [30:0] i1_reg_282;
reg   [30:0] row_reg_293;
reg   [16:0] col_reg_304;
wire    ap_CS_fsm_state27;
reg   [31:0] m_reg_339;
reg    ap_sig_ioackin_c_WREADY;
reg   [31:0] n_reg_350;
reg   [30:0] i4_reg_361;
wire   [31:0] tmp_19_cast_fu_474_p1;
wire   [31:0] tmp_22_cast_fu_549_p1;
wire   [31:0] tmp_25_cast_fu_642_p1;
wire   [31:0] tmp_29_cast_fu_667_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_32_cast_fu_689_p1;
wire   [31:0] tmp_28_cast_fu_736_p1;
wire   [31:0] tmp_16_fu_388_p1;
wire   [31:0] tmp_14_fu_409_p1;
wire   [31:0] tmp_15_fu_429_p1;
reg    ap_reg_ioackin_a_ARREADY;
reg    ap_reg_ioackin_b_ARREADY;
reg    ap_reg_ioackin_c_AWREADY;
reg    ap_reg_ioackin_c_WREADY;
wire   [29:0] a_offset1_fu_378_p4;
wire   [29:0] c_offset5_fu_399_p4;
wire   [29:0] b_offset3_fu_419_p4;
wire  signed [31:0] tmp_fu_439_p0;
wire   [9:0] tmp_17_fu_456_p1;
wire   [17:0] tmp_18_cast_fu_460_p3;
wire   [17:0] y_cast_cast_fu_452_p1;
wire   [17:0] tmp_18_fu_468_p2;
wire   [31:0] i_cast_fu_444_p1;
wire   [31:0] y_cast_fu_448_p1;
wire   [0:0] tmp_2_fu_490_p2;
wire   [16:0] y_2_fu_501_p2;
wire   [16:0] x_2_fu_495_p2;
wire   [9:0] tmp_19_fu_531_p1;
wire   [17:0] tmp_21_cast_fu_535_p3;
wire   [17:0] y3_cast_cast_fu_527_p1;
wire   [17:0] tmp_20_fu_543_p2;
wire   [31:0] i1_cast_fu_554_p1;
wire   [31:0] y3_cast_fu_523_p1;
wire   [0:0] tmp_7_fu_569_p2;
wire   [16:0] y_3_fu_580_p2;
wire   [16:0] x_3_fu_574_p2;
wire   [9:0] tmp_21_fu_606_p1;
wire   [31:0] row_cast_fu_602_p1;
wire  signed [31:0] tmp_s_fu_618_p1;
wire   [17:0] tmp_22_fu_637_p2;
wire   [31:0] col_cast_fu_629_p1;
wire  signed [31:0] exitcond1_fu_647_p1;
wire   [17:0] tmp_26_fu_658_p1;
wire   [17:0] tmp_27_fu_662_p2;
wire   [9:0] tmp_28_fu_672_p1;
wire   [17:0] tmp_31_cast_fu_676_p3;
wire   [17:0] tmp_29_fu_684_p2;
wire  signed [31:0] exitcond_fu_694_p1;
wire   [9:0] tmp_24_fu_718_p1;
wire   [17:0] tmp_23_fu_714_p1;
wire   [17:0] tmp_27_cast_fu_722_p3;
wire   [17:0] tmp_25_fu_730_p2;
wire   [31:0] i4_cast_fu_741_p1;
wire   [0:0] tmp_4_fu_756_p2;
wire   [31:0] m_2_fu_761_p2;
wire   [31:0] n_2_fu_767_p2;
reg   [29:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1184;
reg    ap_condition_514;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_a_ARREADY = 1'b0;
#0 ap_reg_ioackin_b_ARREADY = 1'b0;
#0 ap_reg_ioackin_c_AWREADY = 1'b0;
#0 ap_reg_ioackin_c_WREADY = 1'b0;
end

mmult_accel_a_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_CACHE_VALUE ))
mmult_accel_a_m_axi_U(
    .AWVALID(m_axi_a_AWVALID),
    .AWREADY(m_axi_a_AWREADY),
    .AWADDR(m_axi_a_AWADDR),
    .AWID(m_axi_a_AWID),
    .AWLEN(m_axi_a_AWLEN),
    .AWSIZE(m_axi_a_AWSIZE),
    .AWBURST(m_axi_a_AWBURST),
    .AWLOCK(m_axi_a_AWLOCK),
    .AWCACHE(m_axi_a_AWCACHE),
    .AWPROT(m_axi_a_AWPROT),
    .AWQOS(m_axi_a_AWQOS),
    .AWREGION(m_axi_a_AWREGION),
    .AWUSER(m_axi_a_AWUSER),
    .WVALID(m_axi_a_WVALID),
    .WREADY(m_axi_a_WREADY),
    .WDATA(m_axi_a_WDATA),
    .WSTRB(m_axi_a_WSTRB),
    .WLAST(m_axi_a_WLAST),
    .WID(m_axi_a_WID),
    .WUSER(m_axi_a_WUSER),
    .ARVALID(m_axi_a_ARVALID),
    .ARREADY(m_axi_a_ARREADY),
    .ARADDR(m_axi_a_ARADDR),
    .ARID(m_axi_a_ARID),
    .ARLEN(m_axi_a_ARLEN),
    .ARSIZE(m_axi_a_ARSIZE),
    .ARBURST(m_axi_a_ARBURST),
    .ARLOCK(m_axi_a_ARLOCK),
    .ARCACHE(m_axi_a_ARCACHE),
    .ARPROT(m_axi_a_ARPROT),
    .ARQOS(m_axi_a_ARQOS),
    .ARREGION(m_axi_a_ARREGION),
    .ARUSER(m_axi_a_ARUSER),
    .RVALID(m_axi_a_RVALID),
    .RREADY(m_axi_a_RREADY),
    .RDATA(m_axi_a_RDATA),
    .RLAST(m_axi_a_RLAST),
    .RID(m_axi_a_RID),
    .RUSER(m_axi_a_RUSER),
    .RRESP(m_axi_a_RRESP),
    .BVALID(m_axi_a_BVALID),
    .BREADY(m_axi_a_BREADY),
    .BRESP(m_axi_a_BRESP),
    .BID(m_axi_a_BID),
    .BUSER(m_axi_a_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(a_ARVALID),
    .I_ARREADY(a_ARREADY),
    .I_ARADDR(tmp_16_fu_388_p1),
    .I_ARID(1'd0),
    .I_ARLEN(matrix_size_reg_799),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(a_RVALID),
    .I_RREADY(a_RREADY),
    .I_RDATA(a_RDATA),
    .I_RID(a_RID),
    .I_RUSER(a_RUSER),
    .I_RRESP(a_RRESP),
    .I_RLAST(a_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(a_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(a_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(a_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(a_BRESP),
    .I_BID(a_BID),
    .I_BUSER(a_BUSER)
);

mmult_accel_b_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_CACHE_VALUE ))
mmult_accel_b_m_axi_U(
    .AWVALID(m_axi_b_AWVALID),
    .AWREADY(m_axi_b_AWREADY),
    .AWADDR(m_axi_b_AWADDR),
    .AWID(m_axi_b_AWID),
    .AWLEN(m_axi_b_AWLEN),
    .AWSIZE(m_axi_b_AWSIZE),
    .AWBURST(m_axi_b_AWBURST),
    .AWLOCK(m_axi_b_AWLOCK),
    .AWCACHE(m_axi_b_AWCACHE),
    .AWPROT(m_axi_b_AWPROT),
    .AWQOS(m_axi_b_AWQOS),
    .AWREGION(m_axi_b_AWREGION),
    .AWUSER(m_axi_b_AWUSER),
    .WVALID(m_axi_b_WVALID),
    .WREADY(m_axi_b_WREADY),
    .WDATA(m_axi_b_WDATA),
    .WSTRB(m_axi_b_WSTRB),
    .WLAST(m_axi_b_WLAST),
    .WID(m_axi_b_WID),
    .WUSER(m_axi_b_WUSER),
    .ARVALID(m_axi_b_ARVALID),
    .ARREADY(m_axi_b_ARREADY),
    .ARADDR(m_axi_b_ARADDR),
    .ARID(m_axi_b_ARID),
    .ARLEN(m_axi_b_ARLEN),
    .ARSIZE(m_axi_b_ARSIZE),
    .ARBURST(m_axi_b_ARBURST),
    .ARLOCK(m_axi_b_ARLOCK),
    .ARCACHE(m_axi_b_ARCACHE),
    .ARPROT(m_axi_b_ARPROT),
    .ARQOS(m_axi_b_ARQOS),
    .ARREGION(m_axi_b_ARREGION),
    .ARUSER(m_axi_b_ARUSER),
    .RVALID(m_axi_b_RVALID),
    .RREADY(m_axi_b_RREADY),
    .RDATA(m_axi_b_RDATA),
    .RLAST(m_axi_b_RLAST),
    .RID(m_axi_b_RID),
    .RUSER(m_axi_b_RUSER),
    .RRESP(m_axi_b_RRESP),
    .BVALID(m_axi_b_BVALID),
    .BREADY(m_axi_b_BREADY),
    .BRESP(m_axi_b_BRESP),
    .BID(m_axi_b_BID),
    .BUSER(m_axi_b_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(b_ARVALID),
    .I_ARREADY(b_ARREADY),
    .I_ARADDR(b_addr_reg_820),
    .I_ARID(1'd0),
    .I_ARLEN(matrix_size_reg_799),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(b_RVALID),
    .I_RREADY(b_RREADY),
    .I_RDATA(b_RDATA),
    .I_RID(b_RID),
    .I_RUSER(b_RUSER),
    .I_RRESP(b_RRESP),
    .I_RLAST(b_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(b_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(b_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(b_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(b_BRESP),
    .I_BID(b_BID),
    .I_BUSER(b_BUSER)
);

mmult_accel_c_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_C_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_C_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_C_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_C_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_C_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_C_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_C_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_C_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_C_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_C_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_C_CACHE_VALUE ))
mmult_accel_c_m_axi_U(
    .AWVALID(m_axi_c_AWVALID),
    .AWREADY(m_axi_c_AWREADY),
    .AWADDR(m_axi_c_AWADDR),
    .AWID(m_axi_c_AWID),
    .AWLEN(m_axi_c_AWLEN),
    .AWSIZE(m_axi_c_AWSIZE),
    .AWBURST(m_axi_c_AWBURST),
    .AWLOCK(m_axi_c_AWLOCK),
    .AWCACHE(m_axi_c_AWCACHE),
    .AWPROT(m_axi_c_AWPROT),
    .AWQOS(m_axi_c_AWQOS),
    .AWREGION(m_axi_c_AWREGION),
    .AWUSER(m_axi_c_AWUSER),
    .WVALID(m_axi_c_WVALID),
    .WREADY(m_axi_c_WREADY),
    .WDATA(m_axi_c_WDATA),
    .WSTRB(m_axi_c_WSTRB),
    .WLAST(m_axi_c_WLAST),
    .WID(m_axi_c_WID),
    .WUSER(m_axi_c_WUSER),
    .ARVALID(m_axi_c_ARVALID),
    .ARREADY(m_axi_c_ARREADY),
    .ARADDR(m_axi_c_ARADDR),
    .ARID(m_axi_c_ARID),
    .ARLEN(m_axi_c_ARLEN),
    .ARSIZE(m_axi_c_ARSIZE),
    .ARBURST(m_axi_c_ARBURST),
    .ARLOCK(m_axi_c_ARLOCK),
    .ARCACHE(m_axi_c_ARCACHE),
    .ARPROT(m_axi_c_ARPROT),
    .ARQOS(m_axi_c_ARQOS),
    .ARREGION(m_axi_c_ARREGION),
    .ARUSER(m_axi_c_ARUSER),
    .RVALID(m_axi_c_RVALID),
    .RREADY(m_axi_c_RREADY),
    .RDATA(m_axi_c_RDATA),
    .RLAST(m_axi_c_RLAST),
    .RID(m_axi_c_RID),
    .RUSER(m_axi_c_RUSER),
    .RRESP(m_axi_c_RRESP),
    .BVALID(m_axi_c_BVALID),
    .BREADY(m_axi_c_BREADY),
    .BRESP(m_axi_c_BRESP),
    .BID(m_axi_c_BID),
    .BUSER(m_axi_c_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(c_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(c_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(c_RDATA),
    .I_RID(c_RID),
    .I_RUSER(c_RUSER),
    .I_RRESP(c_RRESP),
    .I_RLAST(c_RLAST),
    .I_AWVALID(c_AWVALID),
    .I_AWREADY(c_AWREADY),
    .I_AWADDR(c_addr_reg_815),
    .I_AWID(1'd0),
    .I_AWLEN(matrix_size_reg_799),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(c_WVALID),
    .I_WREADY(c_WREADY),
    .I_WDATA(tmpData_c_reg_984),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(c_BVALID),
    .I_BREADY(c_BREADY),
    .I_BRESP(c_BRESP),
    .I_BID(c_BID),
    .I_BUSER(c_BUSER)
);

mmult_accel_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
bufa_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufa_address0),
    .ce0(bufa_ce0),
    .we0(bufa_we0),
    .d0(tmpData_a_reg_846),
    .q0(bufa_q0)
);

mmult_accel_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
bufb_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufb_address0),
    .ce0(bufb_ce0),
    .we0(bufb_we0),
    .d0(tmpData_b_reg_874),
    .q0(bufb_q0)
);

mmult_accel_bufa #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
bufc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bufc_address0),
    .ce0(bufc_ce0),
    .we0(bufc_we0),
    .d0(result_reg_315),
    .q0(bufc_q0)
);

mmult_accel_mul_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_accel_mul_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(size),
    .din1(size),
    .ce(1'b1),
    .dout(grp_fu_372_p2)
);

mmult_accel_mul_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mmult_accel_mul_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bufb_load_reg_946),
    .din1(bufa_load_reg_941),
    .ce(1'b1),
    .dout(grp_fu_705_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state22))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond1_fu_647_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state22)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state22 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond1_fu_647_p2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_a_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_a_ARREADY == 1'b1)) begin
                ap_reg_ioackin_a_ARREADY <= 1'b0;
            end else if ((1'b1 == a_ARREADY)) begin
                ap_reg_ioackin_a_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_b_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd0))) begin
            if ((ap_condition_514 == 1'b1)) begin
                ap_reg_ioackin_b_ARREADY <= 1'b0;
            end else if ((ap_condition_1184 == 1'b1)) begin
                ap_reg_ioackin_b_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_c_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2))) begin
            if ((ap_block_state20_io == 1'b0)) begin
                ap_reg_ioackin_c_AWREADY <= 1'b0;
            end else if ((1'b1 == c_AWREADY)) begin
                ap_reg_ioackin_c_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_c_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_c_WREADY == 1'b1)) begin
                ap_reg_ioackin_c_WREADY <= 1'b0;
            end else if ((1'b1 == c_WREADY)) begin
                ap_reg_ioackin_c_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        col_reg_304 <= col_1_reg_917;
    end else if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0) & (1'd1 == tmp_s_fu_618_p2))) begin
        col_reg_304 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i1_reg_282 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i1_reg_282 <= i_2_reg_869;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2) & (ap_block_state20_io == 1'b0))) begin
        i4_reg_361 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_c_WREADY == 1'b1))) begin
        i4_reg_361 <= i_3_reg_969;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_227 <= i_1_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_227 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_694_p2))) begin
        k_reg_328 <= k_1_fu_699_p2;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond1_fu_647_p2))) begin
        k_reg_328 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2) & (ap_block_state20_io == 1'b0))) begin
        m_reg_339 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_c_WREADY == 1'b1))) begin
        m_reg_339 <= m_1_reg_974;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2) & (ap_block_state20_io == 1'b0))) begin
        n_reg_350 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_c_WREADY == 1'b1))) begin
        n_reg_350 <= n_1_reg_979;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_reg_932))) begin
        result_reg_315 <= result_1_fu_709_p2;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond1_fu_647_p2))) begin
        result_reg_315 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)) & (1'd0 == tmp_6_fu_558_p2))) begin
        row_reg_293 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond1_fu_647_p2))) begin
        row_reg_293 <= row_1_reg_898;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x2_reg_271 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        x2_reg_271 <= x_4_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        x_reg_249 <= x_1_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_reg_249 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        y3_reg_260 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        y3_reg_260 <= y_4_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        y_reg_238 <= y_1_reg_851;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_reg_238 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_932 <= exitcond_reg_932;
        exitcond_reg_932 <= exitcond_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_reg_932 <= ap_reg_pp0_iter1_exitcond_reg_932;
        ap_reg_pp0_iter3_exitcond_reg_932 <= ap_reg_pp0_iter2_exitcond_reg_932;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_addr_reg_820[29 : 0] <= tmp_15_fu_429_p1[29 : 0];
        c_addr_reg_815[29 : 0] <= tmp_14_fu_409_p1[29 : 0];
        tmp_reg_826 <= tmp_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io)))) begin
        bufa_addr_reg_833 <= tmp_19_cast_fu_474_p1;
        i_1_reg_841 <= i_1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_932))) begin
        bufa_load_reg_941 <= bufa_q0;
        bufb_load_reg_946 <= bufb_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)))) begin
        bufb_addr_reg_861 <= tmp_22_cast_fu_549_p1;
        i_2_reg_869 <= i_2_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        bufc_addr_1_reg_908 <= tmp_25_cast_fu_642_p1;
        col_1_reg_917 <= col_1_fu_652_p2;
        col_cast_cast_reg_903[16 : 0] <= col_cast_cast_fu_633_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_3_reg_969 <= i_3_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_3_fu_745_p2))) begin
        m_1_reg_974 <= m_1_fu_773_p3;
        n_1_reg_979 <= n_1_fu_781_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        matrix_size_reg_799 <= grp_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0))) begin
        row_1_reg_898 <= row_1_fu_623_p2;
        tmp_24_cast_reg_889[17 : 8] <= tmp_24_cast_fu_610_p3[17 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd1) & ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io)))) begin
        tmpData_a_reg_846 <= a_RDATA;
        x_1_reg_856 <= x_1_fu_515_p3;
        y_1_reg_851 <= y_1_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == tmp_6_fu_558_p2) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)))) begin
        tmpData_b_reg_874 <= b_RDATA;
        x_4_reg_884 <= x_4_fu_594_p3;
        y_4_reg_879 <= y_4_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmpData_c_reg_984 <= bufc_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_reg_932))) begin
        tmp_5_reg_951 <= grp_fu_705_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_a_ARREADY))) begin
        a_ARVALID = 1'b1;
    end else begin
        a_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd1) & ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io)))) begin
        a_RREADY = 1'b1;
    end else begin
        a_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_blk_n_AR = m_axi_a_ARREADY;
    end else begin
        a_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd1))) begin
        a_blk_n_R = m_axi_a_RVALID;
    end else begin
        a_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_fu_694_p2)) begin
        ap_condition_pp0_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (c_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (c_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_a_ARREADY)) begin
        ap_sig_ioackin_a_ARREADY = a_ARREADY;
    end else begin
        ap_sig_ioackin_a_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_b_ARREADY)) begin
        ap_sig_ioackin_b_ARREADY = b_ARREADY;
    end else begin
        ap_sig_ioackin_b_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_c_AWREADY)) begin
        ap_sig_ioackin_c_AWREADY = c_AWREADY;
    end else begin
        ap_sig_ioackin_c_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_c_WREADY)) begin
        ap_sig_ioackin_c_WREADY = c_WREADY;
    end else begin
        ap_sig_ioackin_c_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd0) & ~((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) & (1'b0 == ap_reg_ioackin_b_ARREADY))) begin
        b_ARVALID = 1'b1;
    end else begin
        b_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == tmp_6_fu_558_p2) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)))) begin
        b_RREADY = 1'b1;
    end else begin
        b_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd0))) begin
        b_blk_n_AR = m_axi_b_ARREADY;
    end else begin
        b_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == tmp_6_fu_558_p2))) begin
        b_blk_n_R = m_axi_b_RVALID;
    end else begin
        b_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0))) begin
        bufa_address0 = tmp_29_cast_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        bufa_address0 = bufa_addr_reg_833;
    end else begin
        bufa_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (1'b1 == ap_CS_fsm_state11))) begin
        bufa_ce0 = 1'b1;
    end else begin
        bufa_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bufa_we0 = 1'b1;
    end else begin
        bufa_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0))) begin
        bufb_address0 = tmp_32_cast_fu_689_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        bufb_address0 = bufb_addr_reg_861;
    end else begin
        bufb_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (1'b1 == ap_CS_fsm_state19))) begin
        bufb_ce0 = 1'b1;
    end else begin
        bufb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        bufb_we0 = 1'b1;
    end else begin
        bufb_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        bufc_address0 = tmp_28_cast_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        bufc_address0 = bufc_addr_1_reg_908;
    end else begin
        bufc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        bufc_ce0 = 1'b1;
    end else begin
        bufc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        bufc_we0 = 1'b1;
    end else begin
        bufc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2) & (1'b0 == ap_reg_ioackin_c_AWREADY))) begin
        c_AWVALID = 1'b1;
    end else begin
        c_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (c_BVALID == 1'b1))) begin
        c_BREADY = 1'b1;
    end else begin
        c_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_reg_ioackin_c_WREADY))) begin
        c_WVALID = 1'b1;
    end else begin
        c_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2))) begin
        c_blk_n_AW = m_axi_c_AWREADY;
    end else begin
        c_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        c_blk_n_B = m_axi_c_BVALID;
    end else begin
        c_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        c_blk_n_W = m_axi_c_WREADY;
    end else begin
        c_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_a_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd0) & ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_479_p2 == 1'd1) & ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)) & (1'd0 == tmp_6_fu_558_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == tmp_6_fu_558_p2) & ~((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_s_fu_618_p2) & (ap_block_state20_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0) & (1'd1 == tmp_s_fu_618_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond1_fu_647_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == exitcond_fu_694_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == exitcond_fu_694_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == tmp_3_fu_745_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_c_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (c_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_offset1_fu_378_p4 = {{a_offset[31:2]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10 = ((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID));
end

always @ (*) begin
    ap_block_state10_io = ((tmp_1_fu_479_p2 == 1'd0) & (1'b0 == ap_sig_ioackin_b_ARREADY));
end

always @ (*) begin
    ap_block_state18 = ((1'd1 == tmp_6_fu_558_p2) & (1'b0 == b_RVALID));
end

always @ (*) begin
    ap_block_state20_io = ((1'd0 == tmp_s_fu_618_p2) & (1'b0 == ap_sig_ioackin_c_AWREADY));
end

assign ap_block_state22_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1184 = ((1'b1 == b_ARREADY) & ~((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)));
end

always @ (*) begin
    ap_condition_514 = ~(((tmp_1_fu_479_p2 == 1'd1) & (1'b0 == a_RVALID)) | (1'b1 == ap_block_state10_io));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_offset3_fu_419_p4 = {{b_offset[31:2]}};

assign c_offset5_fu_399_p4 = {{c_offset[31:2]}};

assign col_1_fu_652_p2 = (col_reg_304 + 17'd1);

assign col_cast_cast_fu_633_p1 = col_reg_304;

assign col_cast_fu_629_p1 = col_reg_304;

assign exitcond1_fu_647_p1 = size;

assign exitcond1_fu_647_p2 = ((col_cast_fu_629_p1 == exitcond1_fu_647_p1) ? 1'b1 : 1'b0);

assign exitcond_fu_694_p1 = size;

assign exitcond_fu_694_p2 = ((k_reg_328 == exitcond_fu_694_p1) ? 1'b1 : 1'b0);

assign i1_cast_fu_554_p1 = i1_reg_282;

assign i4_cast_fu_741_p1 = i4_reg_361;

assign i_1_fu_484_p2 = (31'd1 + i_reg_227);

assign i_2_fu_563_p2 = (31'd1 + i1_reg_282);

assign i_3_fu_750_p2 = (31'd1 + i4_reg_361);

assign i_cast_fu_444_p1 = i_reg_227;

assign k_1_fu_699_p2 = (32'd1 + k_reg_328);

assign m_1_fu_773_p3 = ((tmp_4_fu_756_p2[0:0] === 1'b1) ? m_2_fu_761_p2 : m_reg_339);

assign m_2_fu_761_p2 = (m_reg_339 + 32'd1);

assign n_1_fu_781_p3 = ((tmp_4_fu_756_p2[0:0] === 1'b1) ? 32'd0 : n_2_fu_767_p2);

assign n_2_fu_767_p2 = (n_reg_350 + 32'd1);

assign result_1_fu_709_p2 = (tmp_5_reg_951 + result_reg_315);

assign row_1_fu_623_p2 = (31'd1 + row_reg_293);

assign row_cast_fu_602_p1 = row_reg_293;

assign tmp_14_fu_409_p1 = c_offset5_fu_399_p4;

assign tmp_15_fu_429_p1 = b_offset3_fu_419_p4;

assign tmp_16_fu_388_p1 = a_offset1_fu_378_p4;

assign tmp_17_fu_456_p1 = x_reg_249[9:0];

assign tmp_18_cast_fu_460_p3 = {{tmp_17_fu_456_p1}, {8'd0}};

assign tmp_18_fu_468_p2 = (tmp_18_cast_fu_460_p3 + y_cast_cast_fu_452_p1);

assign tmp_19_cast_fu_474_p1 = tmp_18_fu_468_p2;

assign tmp_19_fu_531_p1 = x2_reg_271[9:0];

assign tmp_1_fu_479_p2 = (($signed(i_cast_fu_444_p1) < $signed(matrix_size_reg_799)) ? 1'b1 : 1'b0);

assign tmp_20_fu_543_p2 = (tmp_21_cast_fu_535_p3 + y3_cast_cast_fu_527_p1);

assign tmp_21_cast_fu_535_p3 = {{tmp_19_fu_531_p1}, {8'd0}};

assign tmp_21_fu_606_p1 = row_reg_293[9:0];

assign tmp_22_cast_fu_549_p1 = tmp_20_fu_543_p2;

assign tmp_22_fu_637_p2 = (tmp_24_cast_reg_889 + col_cast_cast_fu_633_p1);

assign tmp_23_fu_714_p1 = n_reg_350[17:0];

assign tmp_24_cast_fu_610_p3 = {{tmp_21_fu_606_p1}, {8'd0}};

assign tmp_24_fu_718_p1 = m_reg_339[9:0];

assign tmp_25_cast_fu_642_p1 = tmp_22_fu_637_p2;

assign tmp_25_fu_730_p2 = (tmp_23_fu_714_p1 + tmp_27_cast_fu_722_p3);

assign tmp_26_fu_658_p1 = k_reg_328[17:0];

assign tmp_27_cast_fu_722_p3 = {{tmp_24_fu_718_p1}, {8'd0}};

assign tmp_27_fu_662_p2 = (tmp_26_fu_658_p1 + tmp_24_cast_reg_889);

assign tmp_28_cast_fu_736_p1 = tmp_25_fu_730_p2;

assign tmp_28_fu_672_p1 = k_reg_328[9:0];

assign tmp_29_cast_fu_667_p1 = tmp_27_fu_662_p2;

assign tmp_29_fu_684_p2 = (col_cast_cast_reg_903 + tmp_31_cast_fu_676_p3);

assign tmp_2_fu_490_p2 = ((y_cast_fu_448_p1 == tmp_reg_826) ? 1'b1 : 1'b0);

assign tmp_31_cast_fu_676_p3 = {{tmp_28_fu_672_p1}, {8'd0}};

assign tmp_32_cast_fu_689_p1 = tmp_29_fu_684_p2;

assign tmp_3_fu_745_p2 = (($signed(i4_cast_fu_741_p1) < $signed(matrix_size_reg_799)) ? 1'b1 : 1'b0);

assign tmp_4_fu_756_p2 = ((n_reg_350 == tmp_reg_826) ? 1'b1 : 1'b0);

assign tmp_6_fu_558_p2 = (($signed(i1_cast_fu_554_p1) < $signed(matrix_size_reg_799)) ? 1'b1 : 1'b0);

assign tmp_7_fu_569_p2 = ((y3_cast_fu_523_p1 == tmp_reg_826) ? 1'b1 : 1'b0);

assign tmp_fu_439_p0 = size;

assign tmp_fu_439_p2 = ($signed(tmp_fu_439_p0) + $signed(32'd4294967295));

assign tmp_s_fu_618_p1 = size;

assign tmp_s_fu_618_p2 = (($signed(row_cast_fu_602_p1) < $signed(tmp_s_fu_618_p1)) ? 1'b1 : 1'b0);

assign x_1_fu_515_p3 = ((tmp_2_fu_490_p2[0:0] === 1'b1) ? x_2_fu_495_p2 : x_reg_249);

assign x_2_fu_495_p2 = (x_reg_249 + 17'd1);

assign x_3_fu_574_p2 = (x2_reg_271 + 17'd1);

assign x_4_fu_594_p3 = ((tmp_7_fu_569_p2[0:0] === 1'b1) ? x_3_fu_574_p2 : x2_reg_271);

assign y3_cast_cast_fu_527_p1 = y3_reg_260;

assign y3_cast_fu_523_p1 = y3_reg_260;

assign y_1_fu_507_p3 = ((tmp_2_fu_490_p2[0:0] === 1'b1) ? 17'd0 : y_2_fu_501_p2);

assign y_2_fu_501_p2 = (y_reg_238 + 17'd1);

assign y_3_fu_580_p2 = (y3_reg_260 + 17'd1);

assign y_4_fu_586_p3 = ((tmp_7_fu_569_p2[0:0] === 1'b1) ? 17'd0 : y_3_fu_580_p2);

assign y_cast_cast_fu_452_p1 = y_reg_238;

assign y_cast_fu_448_p1 = y_reg_238;

always @ (posedge ap_clk) begin
    c_addr_reg_815[31:30] <= 2'b00;
    b_addr_reg_820[31:30] <= 2'b00;
    tmp_24_cast_reg_889[7:0] <= 8'b00000000;
    col_cast_cast_reg_903[17] <= 1'b0;
end

endmodule //mmult_accel
