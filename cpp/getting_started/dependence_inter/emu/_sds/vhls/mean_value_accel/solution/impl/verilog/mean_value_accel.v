// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mean_value_accel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125001,HLS_SYN_LAT=2566,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=4,HLS_SYN_FF=3283,HLS_SYN_LUT=2342}" *)

module mean_value_accel (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY,
        m_axi_in_r_AWADDR,
        m_axi_in_r_AWID,
        m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID,
        m_axi_in_r_WREADY,
        m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST,
        m_axi_in_r_WID,
        m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY,
        m_axi_in_r_ARADDR,
        m_axi_in_r_ARID,
        m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID,
        m_axi_in_r_RREADY,
        m_axi_in_r_RDATA,
        m_axi_in_r_RLAST,
        m_axi_in_r_RID,
        m_axi_in_r_RUSER,
        m_axi_in_r_RRESP,
        m_axi_in_r_BVALID,
        m_axi_in_r_BREADY,
        m_axi_in_r_BRESP,
        m_axi_in_r_BID,
        m_axi_in_r_BUSER,
        m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY,
        m_axi_out_r_AWADDR,
        m_axi_out_r_AWID,
        m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID,
        m_axi_out_r_WREADY,
        m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST,
        m_axi_out_r_WID,
        m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY,
        m_axi_out_r_ARADDR,
        m_axi_out_r_ARID,
        m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID,
        m_axi_out_r_RREADY,
        m_axi_out_r_RDATA,
        m_axi_out_r_RLAST,
        m_axi_out_r_RID,
        m_axi_out_r_RUSER,
        m_axi_out_r_RRESP,
        m_axi_out_r_BVALID,
        m_axi_out_r_BREADY,
        m_axi_out_r_BRESP,
        m_axi_out_r_BID,
        m_axi_out_r_BUSER,
        in_offset,
        out_offset,
        size
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_pp0_stage0 = 30'd128;
parameter    ap_ST_fsm_state11 = 30'd256;
parameter    ap_ST_fsm_state12 = 30'd512;
parameter    ap_ST_fsm_state13 = 30'd1024;
parameter    ap_ST_fsm_state14 = 30'd2048;
parameter    ap_ST_fsm_state15 = 30'd4096;
parameter    ap_ST_fsm_state16 = 30'd8192;
parameter    ap_ST_fsm_state17 = 30'd16384;
parameter    ap_ST_fsm_state18 = 30'd32768;
parameter    ap_ST_fsm_state19 = 30'd65536;
parameter    ap_ST_fsm_state20 = 30'd131072;
parameter    ap_ST_fsm_state21 = 30'd262144;
parameter    ap_ST_fsm_state22 = 30'd524288;
parameter    ap_ST_fsm_state23 = 30'd1048576;
parameter    ap_ST_fsm_state24 = 30'd2097152;
parameter    ap_ST_fsm_state25 = 30'd4194304;
parameter    ap_ST_fsm_state26 = 30'd8388608;
parameter    ap_ST_fsm_pp1_stage0 = 30'd16777216;
parameter    ap_ST_fsm_state30 = 30'd33554432;
parameter    ap_ST_fsm_state31 = 30'd67108864;
parameter    ap_ST_fsm_state32 = 30'd134217728;
parameter    ap_ST_fsm_state33 = 30'd268435456;
parameter    ap_ST_fsm_state34 = 30'd536870912;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_M_AXI_IN_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in_r_AWVALID;
input   m_axi_in_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_in_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_AWID;
output  [7:0] m_axi_in_r_AWLEN;
output  [2:0] m_axi_in_r_AWSIZE;
output  [1:0] m_axi_in_r_AWBURST;
output  [1:0] m_axi_in_r_AWLOCK;
output  [3:0] m_axi_in_r_AWCACHE;
output  [2:0] m_axi_in_r_AWPROT;
output  [3:0] m_axi_in_r_AWQOS;
output  [3:0] m_axi_in_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_in_r_AWUSER;
output   m_axi_in_r_WVALID;
input   m_axi_in_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_in_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_in_r_WSTRB;
output   m_axi_in_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_in_r_WUSER;
output   m_axi_in_r_ARVALID;
input   m_axi_in_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_in_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_ARID;
output  [7:0] m_axi_in_r_ARLEN;
output  [2:0] m_axi_in_r_ARSIZE;
output  [1:0] m_axi_in_r_ARBURST;
output  [1:0] m_axi_in_r_ARLOCK;
output  [3:0] m_axi_in_r_ARCACHE;
output  [2:0] m_axi_in_r_ARPROT;
output  [3:0] m_axi_in_r_ARQOS;
output  [3:0] m_axi_in_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_in_r_ARUSER;
input   m_axi_in_r_RVALID;
output   m_axi_in_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_in_r_RDATA;
input   m_axi_in_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_in_r_RUSER;
input  [1:0] m_axi_in_r_RRESP;
input   m_axi_in_r_BVALID;
output   m_axi_in_r_BREADY;
input  [1:0] m_axi_in_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_in_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_in_r_BUSER;
output   m_axi_out_r_AWVALID;
input   m_axi_out_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_AWID;
output  [7:0] m_axi_out_r_AWLEN;
output  [2:0] m_axi_out_r_AWSIZE;
output  [1:0] m_axi_out_r_AWBURST;
output  [1:0] m_axi_out_r_AWLOCK;
output  [3:0] m_axi_out_r_AWCACHE;
output  [2:0] m_axi_out_r_AWPROT;
output  [3:0] m_axi_out_r_AWQOS;
output  [3:0] m_axi_out_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_out_r_AWUSER;
output   m_axi_out_r_WVALID;
input   m_axi_out_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_out_r_WSTRB;
output   m_axi_out_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_out_r_WUSER;
output   m_axi_out_r_ARVALID;
input   m_axi_out_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_out_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_ARID;
output  [7:0] m_axi_out_r_ARLEN;
output  [2:0] m_axi_out_r_ARSIZE;
output  [1:0] m_axi_out_r_ARBURST;
output  [1:0] m_axi_out_r_ARLOCK;
output  [3:0] m_axi_out_r_ARCACHE;
output  [2:0] m_axi_out_r_ARPROT;
output  [3:0] m_axi_out_r_ARQOS;
output  [3:0] m_axi_out_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_out_r_ARUSER;
input   m_axi_out_r_RVALID;
output   m_axi_out_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_out_r_RDATA;
input   m_axi_out_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_out_r_RUSER;
input  [1:0] m_axi_out_r_RRESP;
input   m_axi_out_r_BVALID;
output   m_axi_out_r_BREADY;
input  [1:0] m_axi_out_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_out_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_out_r_BUSER;
input  [31:0] in_offset;
input  [31:0] out_offset;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_r_blk_n_AR;
reg    in_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_640;
reg    out_r_blk_n_AW;
wire    ap_CS_fsm_state26;
reg    out_r_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_13_reg_779;
reg   [0:0] ap_reg_pp1_iter1_tmp_13_reg_779;
reg    out_r_blk_n_B;
wire    ap_CS_fsm_state34;
wire    in_r_AWREADY;
wire    in_r_WREADY;
reg    in_r_ARVALID;
wire    in_r_ARREADY;
wire    in_r_RVALID;
reg    in_r_RREADY;
wire   [31:0] in_r_RDATA;
wire    in_r_RLAST;
wire   [0:0] in_r_RID;
wire   [0:0] in_r_RUSER;
wire   [1:0] in_r_RRESP;
wire    in_r_BVALID;
wire   [1:0] in_r_BRESP;
wire   [0:0] in_r_BID;
wire   [0:0] in_r_BUSER;
reg    out_r_AWVALID;
wire    out_r_AWREADY;
reg    out_r_WVALID;
wire    out_r_WREADY;
wire    out_r_ARREADY;
wire    out_r_RVALID;
wire   [31:0] out_r_RDATA;
wire    out_r_RLAST;
wire   [0:0] out_r_RID;
wire   [0:0] out_r_RUSER;
wire   [1:0] out_r_RRESP;
wire    out_r_BVALID;
reg    out_r_BREADY;
wire   [1:0] out_r_BRESP;
wire   [0:0] out_r_BID;
wire   [0:0] out_r_BUSER;
reg   [30:0] i_reg_245;
reg   [30:0] i2_reg_268;
wire   [31:0] local_buffer_q0;
reg   [31:0] reg_303;
wire    ap_CS_fsm_state13;
wire   [31:0] local_buffer_q1;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state27_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_state29_pp1_stage0_iter2;
reg    ap_sig_ioackin_out_r_WREADY;
reg    ap_block_state29_io;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] grp_fu_279_p2;
reg   [31:0] reg_309;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
reg   [30:0] reg_313;
reg    ap_sig_ioackin_in_r_ARREADY;
reg   [31:0] out_addr_reg_630;
wire    ap_CS_fsm_state7;
wire   [31:0] i_cast_fu_374_p1;
reg   [31:0] i_cast_reg_635;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] ap_reg_pp0_iter1_i_cast_reg_635;
wire   [0:0] tmp_fu_378_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_640;
wire   [30:0] i_1_fu_383_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] in_addr_read_reg_649;
wire   [31:0] tmp_2_fu_389_p2;
reg   [31:0] tmp_2_reg_654;
wire    ap_CS_fsm_state11;
wire   [31:0] i1_cast_fu_394_p1;
reg   [31:0] i1_cast_reg_665;
wire    ap_CS_fsm_state12;
wire   [12:0] tmp_26_fu_403_p1;
reg   [12:0] tmp_26_reg_673;
wire   [0:0] tmp_3_fu_398_p2;
wire   [30:0] i_2_fu_418_p2;
reg   [30:0] i_2_reg_688;
wire    ap_CS_fsm_state14;
reg   [31:0] local_buffer_load_2_reg_703;
wire   [31:0] tmp_7_fu_434_p2;
reg  signed [31:0] tmp_7_reg_708;
wire    ap_CS_fsm_state15;
reg   [0:0] tmp_27_reg_713;
wire    ap_CS_fsm_state16;
wire   [64:0] grp_fu_451_p2;
reg   [64:0] mul_reg_724;
wire    ap_CS_fsm_state17;
reg   [30:0] tmp_29_reg_729;
wire  signed [31:0] tmp_20_fu_486_p1;
reg  signed [31:0] tmp_20_reg_734;
wire    ap_CS_fsm_state18;
wire   [31:0] neg_ti_fu_496_p2;
reg   [31:0] neg_ti_reg_739;
reg   [0:0] tmp_30_reg_744;
wire   [31:0] p_neg_t5_fu_522_p2;
reg   [31:0] p_neg_t5_reg_749;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire   [12:0] tmp_31_fu_539_p1;
reg   [12:0] tmp_31_reg_759;
reg   [0:0] tmp_32_reg_769;
wire   [31:0] p_neg_t_fu_557_p2;
reg   [31:0] p_neg_t_reg_774;
wire    ap_CS_fsm_state25;
wire   [0:0] tmp_13_fu_588_p2;
wire   [30:0] i_3_fu_593_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
reg    ap_sig_ioackin_out_r_AWREADY;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg   [10:0] local_buffer_address0;
reg    local_buffer_ce0;
reg    local_buffer_we0;
reg   [31:0] local_buffer_d0;
reg   [10:0] local_buffer_address1;
reg    local_buffer_ce1;
reg    local_buffer_we1;
wire   [31:0] local_buffer_d1;
reg   [30:0] i1_reg_256;
wire    ap_CS_fsm_state19;
wire   [31:0] tmp_4_cast_fu_413_p1;
wire   [31:0] i_2_cast_fu_424_p1;
wire   [31:0] tmp_9_cast_fu_513_p1;
wire    ap_CS_fsm_state22;
wire   [31:0] tmp_5_cast_fu_548_p1;
wire   [31:0] tmp_12_cast_fu_579_p1;
wire  signed [31:0] tmp_14_cast_fu_609_p1;
wire   [31:0] tmp_18_fu_343_p1;
wire   [31:0] tmp_6_fu_364_p1;
reg    ap_reg_ioackin_in_r_ARREADY;
reg    ap_reg_ioackin_out_r_AWREADY;
reg    ap_reg_ioackin_out_r_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_8_fu_502_p3;
wire   [31:0] tmp_11_fu_567_p3;
wire   [31:0] grp_fu_317_p2;
wire   [29:0] in_offset1_fu_333_p4;
wire   [29:0] out_offset3_fu_354_p4;
wire   [12:0] tmp_4_fu_407_p2;
wire   [31:0] tmp1_fu_429_p2;
wire   [33:0] grp_fu_451_p0;
wire   [64:0] neg_mul_fu_467_p2;
wire   [30:0] tmp_28_fu_472_p4;
wire  signed [31:0] tmp_19_fu_482_p1;
wire   [31:0] tmp_21_fu_489_p3;
wire   [12:0] tmp_9_fu_508_p2;
wire   [30:0] grp_fu_323_p4;
wire   [31:0] tmp_22_fu_518_p1;
wire   [31:0] tmp_23_fu_528_p1;
wire   [12:0] tmp_5_fu_542_p2;
wire   [31:0] tmp_24_fu_553_p1;
wire   [31:0] tmp_25_fu_563_p1;
wire   [12:0] tmp_12_fu_574_p2;
wire   [31:0] i2_cast_fu_584_p1;
wire   [12:0] tmp_33_fu_599_p1;
wire   [12:0] tmp_14_fu_603_p2;
reg   [29:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_in_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_out_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_out_r_WREADY = 1'b0;
end

mean_value_accel_in_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
mean_value_accel_in_r_m_axi_U(
    .AWVALID(m_axi_in_r_AWVALID),
    .AWREADY(m_axi_in_r_AWREADY),
    .AWADDR(m_axi_in_r_AWADDR),
    .AWID(m_axi_in_r_AWID),
    .AWLEN(m_axi_in_r_AWLEN),
    .AWSIZE(m_axi_in_r_AWSIZE),
    .AWBURST(m_axi_in_r_AWBURST),
    .AWLOCK(m_axi_in_r_AWLOCK),
    .AWCACHE(m_axi_in_r_AWCACHE),
    .AWPROT(m_axi_in_r_AWPROT),
    .AWQOS(m_axi_in_r_AWQOS),
    .AWREGION(m_axi_in_r_AWREGION),
    .AWUSER(m_axi_in_r_AWUSER),
    .WVALID(m_axi_in_r_WVALID),
    .WREADY(m_axi_in_r_WREADY),
    .WDATA(m_axi_in_r_WDATA),
    .WSTRB(m_axi_in_r_WSTRB),
    .WLAST(m_axi_in_r_WLAST),
    .WID(m_axi_in_r_WID),
    .WUSER(m_axi_in_r_WUSER),
    .ARVALID(m_axi_in_r_ARVALID),
    .ARREADY(m_axi_in_r_ARREADY),
    .ARADDR(m_axi_in_r_ARADDR),
    .ARID(m_axi_in_r_ARID),
    .ARLEN(m_axi_in_r_ARLEN),
    .ARSIZE(m_axi_in_r_ARSIZE),
    .ARBURST(m_axi_in_r_ARBURST),
    .ARLOCK(m_axi_in_r_ARLOCK),
    .ARCACHE(m_axi_in_r_ARCACHE),
    .ARPROT(m_axi_in_r_ARPROT),
    .ARQOS(m_axi_in_r_ARQOS),
    .ARREGION(m_axi_in_r_ARREGION),
    .ARUSER(m_axi_in_r_ARUSER),
    .RVALID(m_axi_in_r_RVALID),
    .RREADY(m_axi_in_r_RREADY),
    .RDATA(m_axi_in_r_RDATA),
    .RLAST(m_axi_in_r_RLAST),
    .RID(m_axi_in_r_RID),
    .RUSER(m_axi_in_r_RUSER),
    .RRESP(m_axi_in_r_RRESP),
    .BVALID(m_axi_in_r_BVALID),
    .BREADY(m_axi_in_r_BREADY),
    .BRESP(m_axi_in_r_BRESP),
    .BID(m_axi_in_r_BID),
    .BUSER(m_axi_in_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in_r_ARVALID),
    .I_ARREADY(in_r_ARREADY),
    .I_ARADDR(tmp_18_fu_343_p1),
    .I_ARID(1'd0),
    .I_ARLEN(size),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in_r_RVALID),
    .I_RREADY(in_r_RREADY),
    .I_RDATA(in_r_RDATA),
    .I_RID(in_r_RID),
    .I_RUSER(in_r_RUSER),
    .I_RRESP(in_r_RRESP),
    .I_RLAST(in_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in_r_BRESP),
    .I_BID(in_r_BID),
    .I_BUSER(in_r_BUSER)
);

mean_value_accel_out_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
mean_value_accel_out_r_m_axi_U(
    .AWVALID(m_axi_out_r_AWVALID),
    .AWREADY(m_axi_out_r_AWREADY),
    .AWADDR(m_axi_out_r_AWADDR),
    .AWID(m_axi_out_r_AWID),
    .AWLEN(m_axi_out_r_AWLEN),
    .AWSIZE(m_axi_out_r_AWSIZE),
    .AWBURST(m_axi_out_r_AWBURST),
    .AWLOCK(m_axi_out_r_AWLOCK),
    .AWCACHE(m_axi_out_r_AWCACHE),
    .AWPROT(m_axi_out_r_AWPROT),
    .AWQOS(m_axi_out_r_AWQOS),
    .AWREGION(m_axi_out_r_AWREGION),
    .AWUSER(m_axi_out_r_AWUSER),
    .WVALID(m_axi_out_r_WVALID),
    .WREADY(m_axi_out_r_WREADY),
    .WDATA(m_axi_out_r_WDATA),
    .WSTRB(m_axi_out_r_WSTRB),
    .WLAST(m_axi_out_r_WLAST),
    .WID(m_axi_out_r_WID),
    .WUSER(m_axi_out_r_WUSER),
    .ARVALID(m_axi_out_r_ARVALID),
    .ARREADY(m_axi_out_r_ARREADY),
    .ARADDR(m_axi_out_r_ARADDR),
    .ARID(m_axi_out_r_ARID),
    .ARLEN(m_axi_out_r_ARLEN),
    .ARSIZE(m_axi_out_r_ARSIZE),
    .ARBURST(m_axi_out_r_ARBURST),
    .ARLOCK(m_axi_out_r_ARLOCK),
    .ARCACHE(m_axi_out_r_ARCACHE),
    .ARPROT(m_axi_out_r_ARPROT),
    .ARQOS(m_axi_out_r_ARQOS),
    .ARREGION(m_axi_out_r_ARREGION),
    .ARUSER(m_axi_out_r_ARUSER),
    .RVALID(m_axi_out_r_RVALID),
    .RREADY(m_axi_out_r_RREADY),
    .RDATA(m_axi_out_r_RDATA),
    .RLAST(m_axi_out_r_RLAST),
    .RID(m_axi_out_r_RID),
    .RUSER(m_axi_out_r_RUSER),
    .RRESP(m_axi_out_r_RRESP),
    .BVALID(m_axi_out_r_BVALID),
    .BREADY(m_axi_out_r_BREADY),
    .BRESP(m_axi_out_r_BRESP),
    .BID(m_axi_out_r_BID),
    .BUSER(m_axi_out_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(out_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(out_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(out_r_RDATA),
    .I_RID(out_r_RID),
    .I_RUSER(out_r_RUSER),
    .I_RRESP(out_r_RRESP),
    .I_RLAST(out_r_RLAST),
    .I_AWVALID(out_r_AWVALID),
    .I_AWREADY(out_r_AWREADY),
    .I_AWADDR(out_addr_reg_630),
    .I_AWID(1'd0),
    .I_AWLEN(size),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(out_r_WVALID),
    .I_WREADY(out_r_WREADY),
    .I_WDATA(reg_303),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(out_r_BVALID),
    .I_BREADY(out_r_BREADY),
    .I_BRESP(out_r_BRESP),
    .I_BID(out_r_BID),
    .I_BUSER(out_r_BUSER)
);

mean_value_accel_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
local_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_buffer_address0),
    .ce0(local_buffer_ce0),
    .we0(local_buffer_we0),
    .d0(local_buffer_d0),
    .q0(local_buffer_q0),
    .address1(local_buffer_address1),
    .ce1(local_buffer_ce1),
    .we1(local_buffer_we1),
    .d1(local_buffer_d1),
    .q1(local_buffer_q1)
);

mean_value_accel_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 65 ))
mean_value_accel_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_451_p0),
    .din1(tmp_7_reg_708),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state8 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state27))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state27)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state27 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_in_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_in_r_ARREADY))) begin
                ap_reg_ioackin_in_r_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == in_r_ARREADY))) begin
                ap_reg_ioackin_in_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            if ((ap_sig_ioackin_out_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_out_r_AWREADY <= 1'b0;
            end else if ((1'b1 == out_r_AWREADY)) begin
                ap_reg_ioackin_out_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_out_r_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd1 == ap_reg_pp1_iter1_tmp_13_reg_779))) begin
            if ((ap_block_pp1_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_out_r_WREADY <= 1'b0;
            end else if (((1'b1 == out_r_WREADY) & (ap_block_pp1_stage0_01001 == 1'b0))) begin
                ap_reg_ioackin_out_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_reg_256 <= 31'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i1_reg_256 <= i_2_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd1 == tmp_13_fu_588_p2))) begin
        i2_reg_268 <= i_3_fu_593_p2;
    end else if (((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1))) begin
        i2_reg_268 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_fu_378_p2))) begin
        i_reg_245 <= i_1_fu_383_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_245 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'd1 == tmp_13_reg_779))) begin
        reg_303 <= local_buffer_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_303 <= local_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_i_cast_reg_635[30 : 0] <= i_cast_reg_635[30 : 0];
        ap_reg_pp0_iter1_tmp_reg_640 <= tmp_reg_640;
        i_cast_reg_635[30 : 0] <= i_cast_fu_374_p1[30 : 0];
        tmp_reg_640 <= tmp_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        ap_reg_pp1_iter1_tmp_13_reg_779 <= tmp_13_reg_779;
        tmp_13_reg_779 <= tmp_13_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_cast_reg_665[30 : 0] <= i1_cast_fu_394_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_2_reg_688 <= i_2_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_640 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        in_addr_read_reg_649 <= in_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        local_buffer_load_2_reg_703 <= local_buffer_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul_reg_724 <= grp_fu_451_p2;
        tmp_29_reg_729 <= {{grp_fu_451_p2[64:34]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == tmp_27_reg_713))) begin
        neg_ti_reg_739 <= neg_ti_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_addr_reg_630[29 : 0] <= tmp_6_fu_364_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == tmp_30_reg_744))) begin
        p_neg_t5_reg_749 <= p_neg_t5_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == tmp_32_reg_769))) begin
        p_neg_t_reg_774 <= p_neg_t_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_309 <= grp_fu_279_p2;
        reg_313 <= {{grp_fu_279_p2[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_20_reg_734 <= tmp_20_fu_486_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_3_fu_398_p2))) begin
        tmp_26_reg_673 <= tmp_26_fu_403_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_27_reg_713 <= tmp_7_fu_434_p2[32'd31];
        tmp_7_reg_708 <= tmp_7_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_2_reg_654 <= tmp_2_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_30_reg_744 <= grp_fu_279_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_31_reg_759 <= tmp_31_fu_539_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_32_reg_769 <= grp_fu_279_p2[32'd31];
    end
end

always @ (*) begin
    if ((tmp_fu_378_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_13_fu_588_p2)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (out_r_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (out_r_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_in_r_ARREADY)) begin
        ap_sig_ioackin_in_r_ARREADY = in_r_ARREADY;
    end else begin
        ap_sig_ioackin_in_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_r_AWREADY)) begin
        ap_sig_ioackin_out_r_AWREADY = out_r_AWREADY;
    end else begin
        ap_sig_ioackin_out_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_out_r_WREADY)) begin
        ap_sig_ioackin_out_r_WREADY = out_r_WREADY;
    end else begin
        ap_sig_ioackin_out_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_in_r_ARREADY))) begin
        in_r_ARVALID = 1'b1;
    end else begin
        in_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_640 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        in_r_RREADY = 1'b1;
    end else begin
        in_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_r_blk_n_AR = m_axi_in_r_ARREADY;
    end else begin
        in_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (tmp_reg_640 == 1'd1))) begin
        in_r_blk_n_R = m_axi_in_r_RVALID;
    end else begin
        in_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        local_buffer_address0 = tmp_12_cast_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        local_buffer_address0 = tmp_2_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        local_buffer_address0 = tmp_9_cast_fu_513_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_3_fu_398_p2 == 1'd0))) begin
        local_buffer_address0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_3_fu_398_p2))) begin
        local_buffer_address0 = tmp_4_cast_fu_413_p1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        local_buffer_address0 = ap_reg_pp0_iter1_i_cast_reg_635;
    end else begin
        local_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        local_buffer_address1 = tmp_14_cast_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        local_buffer_address1 = tmp_5_cast_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        local_buffer_address1 = 32'd1024;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        local_buffer_address1 = i1_cast_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        local_buffer_address1 = i_2_cast_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        local_buffer_address1 = 32'd1;
    end else begin
        local_buffer_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_3_fu_398_p2)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_3_fu_398_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state19) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        local_buffer_ce0 = 1'b1;
    end else begin
        local_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | (1'b1 == ap_CS_fsm_state22))) begin
        local_buffer_ce1 = 1'b1;
    end else begin
        local_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        local_buffer_d0 = tmp_11_fu_567_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        local_buffer_d0 = tmp_8_fu_502_p3;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        local_buffer_d0 = in_addr_read_reg_649;
    end else begin
        local_buffer_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state19) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_reg_640)))) begin
        local_buffer_we0 = 1'b1;
    end else begin
        local_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        local_buffer_we1 = 1'b1;
    end else begin
        local_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_reg_ioackin_out_r_AWREADY))) begin
        out_r_AWVALID = 1'b1;
    end else begin
        out_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & (out_r_BVALID == 1'b1))) begin
        out_r_BREADY = 1'b1;
    end else begin
        out_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd1 == ap_reg_pp1_iter1_tmp_13_reg_779) & (ap_block_pp1_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_out_r_WREADY))) begin
        out_r_WVALID = 1'b1;
    end else begin
        out_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        out_r_blk_n_AW = m_axi_out_r_AWREADY;
    end else begin
        out_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out_r_blk_n_B = m_axi_out_r_BVALID;
    end else begin
        out_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0 == 1'b0) & (1'd1 == ap_reg_pp1_iter1_tmp_13_reg_779))) begin
        out_r_blk_n_W = m_axi_out_r_WREADY;
    end else begin
        out_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_in_r_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_fu_378_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_fu_378_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_3_fu_398_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_out_r_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'd0 == tmp_13_fu_588_p2) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'd0 == tmp_13_fu_588_p2) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (out_r_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_640 == 1'd1) & (1'b0 == in_r_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_640 == 1'd1) & (1'b0 == in_r_RVALID));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_enable_reg_pp1_iter2) & (1'b1 == ap_block_state29_io));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_enable_reg_pp1_iter2) & (1'b1 == ap_block_state29_io));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((1'd1 == ap_reg_pp1_iter1_tmp_13_reg_779) & (1'b0 == ap_sig_ioackin_out_r_WREADY));
end

assign ap_block_state29_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((tmp_reg_640 == 1'd1) & (1'b0 == in_r_RVALID));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_279_p2 = (local_buffer_q1 + local_buffer_q0);

assign grp_fu_317_p2 = (32'd0 - reg_309);

assign grp_fu_323_p4 = {{grp_fu_317_p2[31:1]}};

assign grp_fu_451_p0 = 65'd5726623062;

assign i1_cast_fu_394_p1 = i1_reg_256;

assign i2_cast_fu_584_p1 = i2_reg_268;

assign i_1_fu_383_p2 = (i_reg_245 + 31'd1);

assign i_2_cast_fu_424_p1 = i_2_fu_418_p2;

assign i_2_fu_418_p2 = (31'd1 + i1_reg_256);

assign i_3_fu_593_p2 = (i2_reg_268 + 31'd1);

assign i_cast_fu_374_p1 = i_reg_245;

assign in_offset1_fu_333_p4 = {{in_offset[31:2]}};

assign local_buffer_d1 = ((tmp_30_reg_744[0:0] === 1'b1) ? p_neg_t5_reg_749 : tmp_23_fu_528_p1);

assign neg_mul_fu_467_p2 = (65'd0 - mul_reg_724);

assign neg_ti_fu_496_p2 = (32'd0 - tmp_21_fu_489_p3);

assign out_offset3_fu_354_p4 = {{out_offset[31:2]}};

assign p_neg_t5_fu_522_p2 = (32'd0 - tmp_22_fu_518_p1);

assign p_neg_t_fu_557_p2 = (32'd0 - tmp_24_fu_553_p1);

assign tmp1_fu_429_p2 = (local_buffer_load_2_reg_703 + reg_303);

assign tmp_11_fu_567_p3 = ((tmp_32_reg_769[0:0] === 1'b1) ? p_neg_t_reg_774 : tmp_25_fu_563_p1);

assign tmp_12_cast_fu_579_p1 = tmp_12_fu_574_p2;

assign tmp_12_fu_574_p2 = (13'd1023 + tmp_31_reg_759);

assign tmp_13_fu_588_p2 = (($signed(i2_cast_fu_584_p1) < $signed(size)) ? 1'b1 : 1'b0);

assign tmp_14_cast_fu_609_p1 = $signed(tmp_14_fu_603_p2);

assign tmp_14_fu_603_p2 = (13'd1024 + tmp_33_fu_599_p1);

assign tmp_18_fu_343_p1 = in_offset1_fu_333_p4;

assign tmp_19_fu_482_p1 = $signed(tmp_28_fu_472_p4);

assign tmp_20_fu_486_p1 = $signed(tmp_29_reg_729);

assign tmp_21_fu_489_p3 = ((tmp_27_reg_713[0:0] === 1'b1) ? tmp_19_fu_482_p1 : tmp_20_fu_486_p1);

assign tmp_22_fu_518_p1 = grp_fu_323_p4;

assign tmp_23_fu_528_p1 = reg_313;

assign tmp_24_fu_553_p1 = grp_fu_323_p4;

assign tmp_25_fu_563_p1 = reg_313;

assign tmp_26_fu_403_p1 = i1_reg_256[12:0];

assign tmp_28_fu_472_p4 = {{neg_mul_fu_467_p2[64:34]}};

assign tmp_2_fu_389_p2 = ($signed(size) + $signed(32'd4294967295));

assign tmp_31_fu_539_p1 = size[12:0];

assign tmp_33_fu_599_p1 = i2_reg_268[12:0];

assign tmp_3_fu_398_p2 = (($signed(i1_cast_fu_394_p1) < $signed(tmp_2_reg_654)) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_413_p1 = tmp_4_fu_407_p2;

assign tmp_4_fu_407_p2 = ($signed(13'd8191) + $signed(tmp_26_fu_403_p1));

assign tmp_5_cast_fu_548_p1 = tmp_5_fu_542_p2;

assign tmp_5_fu_542_p2 = ($signed(13'd8190) + $signed(tmp_31_fu_539_p1));

assign tmp_6_fu_364_p1 = out_offset3_fu_354_p4;

assign tmp_7_fu_434_p2 = (local_buffer_q1 + tmp1_fu_429_p2);

assign tmp_8_fu_502_p3 = ((tmp_27_reg_713[0:0] === 1'b1) ? neg_ti_reg_739 : tmp_20_reg_734);

assign tmp_9_cast_fu_513_p1 = tmp_9_fu_508_p2;

assign tmp_9_fu_508_p2 = (13'd1024 + tmp_26_reg_673);

assign tmp_fu_378_p2 = (($signed(i_cast_fu_374_p1) < $signed(size)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    out_addr_reg_630[31:30] <= 2'b00;
    i_cast_reg_635[31] <= 1'b0;
    ap_reg_pp0_iter1_i_cast_reg_635[31] <= 1'b0;
    i1_cast_reg_665[31] <= 1'b0;
end

endmodule //mean_value_accel
