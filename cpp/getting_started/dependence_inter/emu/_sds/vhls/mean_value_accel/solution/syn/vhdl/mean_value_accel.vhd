-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mean_value_accel is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_out_r_AWVALID : OUT STD_LOGIC;
    m_axi_out_r_AWREADY : IN STD_LOGIC;
    m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_out_r_WVALID : OUT STD_LOGIC;
    m_axi_out_r_WREADY : IN STD_LOGIC;
    m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_out_r_WLAST : OUT STD_LOGIC;
    m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_out_r_ARVALID : OUT STD_LOGIC;
    m_axi_out_r_ARREADY : IN STD_LOGIC;
    m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_out_r_RVALID : IN STD_LOGIC;
    m_axi_out_r_RREADY : OUT STD_LOGIC;
    m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_out_r_RLAST : IN STD_LOGIC;
    m_axi_out_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BVALID : IN STD_LOGIC;
    m_axi_out_r_BREADY : OUT STD_LOGIC;
    m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    out_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mean_value_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mean_value_accel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125001,HLS_SYN_LAT=2566,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=4,HLS_SYN_FF=3283,HLS_SYN_LUT=2342}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_400 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_const_lv13_1FFE : STD_LOGIC_VECTOR (12 downto 0) := "1111111111110";
    constant ap_const_lv13_3FF : STD_LOGIC_VECTOR (12 downto 0) := "0001111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_r_blk_n_AR : STD_LOGIC;
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal out_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_13_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_tmp_13_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal in_r_AWREADY : STD_LOGIC;
    signal in_r_WREADY : STD_LOGIC;
    signal in_r_ARVALID : STD_LOGIC;
    signal in_r_ARREADY : STD_LOGIC;
    signal in_r_RVALID : STD_LOGIC;
    signal in_r_RREADY : STD_LOGIC;
    signal in_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_RLAST : STD_LOGIC;
    signal in_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in_r_BVALID : STD_LOGIC;
    signal in_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_AWVALID : STD_LOGIC;
    signal out_r_AWREADY : STD_LOGIC;
    signal out_r_WVALID : STD_LOGIC;
    signal out_r_WREADY : STD_LOGIC;
    signal out_r_ARREADY : STD_LOGIC;
    signal out_r_RVALID : STD_LOGIC;
    signal out_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_RLAST : STD_LOGIC;
    signal out_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal out_r_BVALID : STD_LOGIC;
    signal out_r_BREADY : STD_LOGIC;
    signal out_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal out_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_245 : STD_LOGIC_VECTOR (30 downto 0);
    signal i2_reg_268 : STD_LOGIC_VECTOR (30 downto 0);
    signal local_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal local_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state27_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_out_r_WREADY : STD_LOGIC;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_313 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_ioackin_in_r_ARREADY : STD_LOGIC;
    signal out_addr_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_cast_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_i_cast_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_383_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal in_addr_read_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i1_cast_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_cast_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_26_fu_403_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_reg_673 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_418_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_688 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal local_buffer_load_2_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_27_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_724 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_29_reg_729 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal neg_ti_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t5_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t5_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_31_fu_539_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_reg_759 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_13_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_593_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_sig_ioackin_out_r_AWREADY : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state27 : STD_LOGIC;
    signal local_buffer_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_buffer_ce0 : STD_LOGIC;
    signal local_buffer_we0 : STD_LOGIC;
    signal local_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_buffer_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal local_buffer_ce1 : STD_LOGIC;
    signal local_buffer_we1 : STD_LOGIC;
    signal local_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_256 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_4_cast_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_5_cast_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_in_r_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_out_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_out_r_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_8_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_offset1_fu_333_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal out_offset3_fu_354_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_407_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal neg_mul_fu_467_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_28_fu_472_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_508_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_323_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_542_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i2_cast_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_599_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_fu_603_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component mean_value_accel_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component mean_value_accel_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mean_value_accel_in_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mean_value_accel_out_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mean_value_accel_in_r_m_axi_U : component mean_value_accel_in_r_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_in_r_AWVALID,
        AWREADY => m_axi_in_r_AWREADY,
        AWADDR => m_axi_in_r_AWADDR,
        AWID => m_axi_in_r_AWID,
        AWLEN => m_axi_in_r_AWLEN,
        AWSIZE => m_axi_in_r_AWSIZE,
        AWBURST => m_axi_in_r_AWBURST,
        AWLOCK => m_axi_in_r_AWLOCK,
        AWCACHE => m_axi_in_r_AWCACHE,
        AWPROT => m_axi_in_r_AWPROT,
        AWQOS => m_axi_in_r_AWQOS,
        AWREGION => m_axi_in_r_AWREGION,
        AWUSER => m_axi_in_r_AWUSER,
        WVALID => m_axi_in_r_WVALID,
        WREADY => m_axi_in_r_WREADY,
        WDATA => m_axi_in_r_WDATA,
        WSTRB => m_axi_in_r_WSTRB,
        WLAST => m_axi_in_r_WLAST,
        WID => m_axi_in_r_WID,
        WUSER => m_axi_in_r_WUSER,
        ARVALID => m_axi_in_r_ARVALID,
        ARREADY => m_axi_in_r_ARREADY,
        ARADDR => m_axi_in_r_ARADDR,
        ARID => m_axi_in_r_ARID,
        ARLEN => m_axi_in_r_ARLEN,
        ARSIZE => m_axi_in_r_ARSIZE,
        ARBURST => m_axi_in_r_ARBURST,
        ARLOCK => m_axi_in_r_ARLOCK,
        ARCACHE => m_axi_in_r_ARCACHE,
        ARPROT => m_axi_in_r_ARPROT,
        ARQOS => m_axi_in_r_ARQOS,
        ARREGION => m_axi_in_r_ARREGION,
        ARUSER => m_axi_in_r_ARUSER,
        RVALID => m_axi_in_r_RVALID,
        RREADY => m_axi_in_r_RREADY,
        RDATA => m_axi_in_r_RDATA,
        RLAST => m_axi_in_r_RLAST,
        RID => m_axi_in_r_RID,
        RUSER => m_axi_in_r_RUSER,
        RRESP => m_axi_in_r_RRESP,
        BVALID => m_axi_in_r_BVALID,
        BREADY => m_axi_in_r_BREADY,
        BRESP => m_axi_in_r_BRESP,
        BID => m_axi_in_r_BID,
        BUSER => m_axi_in_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in_r_ARVALID,
        I_ARREADY => in_r_ARREADY,
        I_ARADDR => tmp_18_fu_343_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => size,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => in_r_RVALID,
        I_RREADY => in_r_RREADY,
        I_RDATA => in_r_RDATA,
        I_RID => in_r_RID,
        I_RUSER => in_r_RUSER,
        I_RRESP => in_r_RRESP,
        I_RLAST => in_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => in_r_BRESP,
        I_BID => in_r_BID,
        I_BUSER => in_r_BUSER);

    mean_value_accel_out_r_m_axi_U : component mean_value_accel_out_r_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_out_r_AWVALID,
        AWREADY => m_axi_out_r_AWREADY,
        AWADDR => m_axi_out_r_AWADDR,
        AWID => m_axi_out_r_AWID,
        AWLEN => m_axi_out_r_AWLEN,
        AWSIZE => m_axi_out_r_AWSIZE,
        AWBURST => m_axi_out_r_AWBURST,
        AWLOCK => m_axi_out_r_AWLOCK,
        AWCACHE => m_axi_out_r_AWCACHE,
        AWPROT => m_axi_out_r_AWPROT,
        AWQOS => m_axi_out_r_AWQOS,
        AWREGION => m_axi_out_r_AWREGION,
        AWUSER => m_axi_out_r_AWUSER,
        WVALID => m_axi_out_r_WVALID,
        WREADY => m_axi_out_r_WREADY,
        WDATA => m_axi_out_r_WDATA,
        WSTRB => m_axi_out_r_WSTRB,
        WLAST => m_axi_out_r_WLAST,
        WID => m_axi_out_r_WID,
        WUSER => m_axi_out_r_WUSER,
        ARVALID => m_axi_out_r_ARVALID,
        ARREADY => m_axi_out_r_ARREADY,
        ARADDR => m_axi_out_r_ARADDR,
        ARID => m_axi_out_r_ARID,
        ARLEN => m_axi_out_r_ARLEN,
        ARSIZE => m_axi_out_r_ARSIZE,
        ARBURST => m_axi_out_r_ARBURST,
        ARLOCK => m_axi_out_r_ARLOCK,
        ARCACHE => m_axi_out_r_ARCACHE,
        ARPROT => m_axi_out_r_ARPROT,
        ARQOS => m_axi_out_r_ARQOS,
        ARREGION => m_axi_out_r_ARREGION,
        ARUSER => m_axi_out_r_ARUSER,
        RVALID => m_axi_out_r_RVALID,
        RREADY => m_axi_out_r_RREADY,
        RDATA => m_axi_out_r_RDATA,
        RLAST => m_axi_out_r_RLAST,
        RID => m_axi_out_r_RID,
        RUSER => m_axi_out_r_RUSER,
        RRESP => m_axi_out_r_RRESP,
        BVALID => m_axi_out_r_BVALID,
        BREADY => m_axi_out_r_BREADY,
        BRESP => m_axi_out_r_BRESP,
        BID => m_axi_out_r_BID,
        BUSER => m_axi_out_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => out_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => out_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => out_r_RDATA,
        I_RID => out_r_RID,
        I_RUSER => out_r_RUSER,
        I_RRESP => out_r_RRESP,
        I_RLAST => out_r_RLAST,
        I_AWVALID => out_r_AWVALID,
        I_AWREADY => out_r_AWREADY,
        I_AWADDR => out_addr_reg_630,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => size,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => out_r_WVALID,
        I_WREADY => out_r_WREADY,
        I_WDATA => reg_303,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => out_r_BVALID,
        I_BREADY => out_r_BREADY,
        I_BRESP => out_r_BRESP,
        I_BID => out_r_BID,
        I_BUSER => out_r_BUSER);

    local_buffer_U : component mean_value_accel_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => local_buffer_address0,
        ce0 => local_buffer_ce0,
        we0 => local_buffer_we0,
        d0 => local_buffer_d0,
        q0 => local_buffer_q0,
        address1 => local_buffer_address1,
        ce1 => local_buffer_ce1,
        we1 => local_buffer_we1,
        d1 => local_buffer_d1,
        q1 => local_buffer_q1);

    mean_value_accel_cud_U1 : component mean_value_accel_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_451_p0,
        din1 => tmp_7_reg_708,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state8 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state27 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_in_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_in_r_ARREADY)))) then 
                        ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = in_r_ARREADY))) then 
                        ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    if ((ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_out_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = out_r_AWREADY)) then 
                        ap_reg_ioackin_out_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_r_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_13_reg_779))) then
                    if ((ap_block_pp1_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_out_r_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = out_r_WREADY) and (ap_block_pp1_stage0_01001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_out_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i1_reg_256 <= ap_const_lv31_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i1_reg_256 <= i_2_reg_688;
            end if; 
        end if;
    end process;

    i2_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = tmp_13_fu_588_p2))) then 
                i2_reg_268 <= i_3_fu_593_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1))) then 
                i2_reg_268 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_fu_378_p2))) then 
                i_reg_245 <= i_1_fu_383_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_245 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_13_reg_779))) then 
                reg_303 <= local_buffer_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_303 <= local_buffer_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                    ap_reg_pp0_iter1_i_cast_reg_635(30 downto 0) <= i_cast_reg_635(30 downto 0);
                ap_reg_pp0_iter1_tmp_reg_640 <= tmp_reg_640;
                    i_cast_reg_635(30 downto 0) <= i_cast_fu_374_p1(30 downto 0);
                tmp_reg_640 <= tmp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_tmp_13_reg_779 <= tmp_13_reg_779;
                tmp_13_reg_779 <= tmp_13_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    i1_cast_reg_665(30 downto 0) <= i1_cast_fu_394_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_2_reg_688 <= i_2_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_640 = ap_const_lv1_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                in_addr_read_reg_649 <= in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                local_buffer_load_2_reg_703 <= local_buffer_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                mul_reg_724 <= grp_fu_451_p2;
                tmp_29_reg_729 <= grp_fu_451_p2(64 downto 34);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = tmp_27_reg_713))) then
                neg_ti_reg_739 <= neg_ti_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    out_addr_reg_630(29 downto 0) <= tmp_6_fu_364_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = tmp_30_reg_744))) then
                p_neg_t5_reg_749 <= p_neg_t5_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = tmp_32_reg_769))) then
                p_neg_t_reg_774 <= p_neg_t_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_309 <= grp_fu_279_p2;
                reg_313 <= grp_fu_279_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_20_reg_734 <= tmp_20_fu_486_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_3_fu_398_p2))) then
                tmp_26_reg_673 <= tmp_26_fu_403_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_27_reg_713 <= tmp_7_fu_434_p2(31 downto 31);
                tmp_7_reg_708 <= tmp_7_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_2_reg_654 <= tmp_2_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_30_reg_744 <= grp_fu_279_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_31_reg_759 <= tmp_31_fu_539_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_32_reg_769 <= grp_fu_279_p2(31 downto 31);
            end if;
        end if;
    end process;
    out_addr_reg_630(31 downto 30) <= "00";
    i_cast_reg_635(31) <= '0';
    ap_reg_pp0_iter1_i_cast_reg_635(31) <= '0';
    i1_cast_reg_665(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state26, ap_enable_reg_pp1_iter2, ap_CS_fsm_state34, out_r_BVALID, ap_enable_reg_pp1_iter1, ap_sig_ioackin_in_r_ARREADY, tmp_fu_378_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state12, tmp_3_fu_398_p2, tmp_13_fu_588_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_sig_ioackin_out_r_AWREADY, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_in_r_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_fu_378_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_fu_378_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_3_fu_398_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_13_fu_588_p2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_13_fu_588_p2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (out_r_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state34 <= ap_CS_fsm(29);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_reg_640, in_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_reg_640 = ap_const_lv1_1) and (ap_const_logic_0 = in_r_RVALID));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_reg_640, in_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_reg_640 = ap_const_lv1_1) and (ap_const_logic_0 = in_r_RVALID));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state29_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_boolean_1 = ap_block_state29_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state29_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_boolean_1 = ap_block_state29_io));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(ap_reg_pp1_iter1_tmp_13_reg_779, ap_sig_ioackin_out_r_WREADY)
    begin
                ap_block_state29_io <= ((ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_13_reg_779) and (ap_const_logic_0 = ap_sig_ioackin_out_r_WREADY));
    end process;

        ap_block_state29_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(tmp_reg_640, in_r_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((tmp_reg_640 = ap_const_lv1_1) and (ap_const_logic_0 = in_r_RVALID));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(tmp_fu_378_p2)
    begin
        if ((tmp_fu_378_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state27_assign_proc : process(tmp_13_fu_588_p2)
    begin
        if ((ap_const_lv1_0 = tmp_13_fu_588_p2)) then 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state34, out_r_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (out_r_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, out_r_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (out_r_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_in_r_ARREADY_assign_proc : process(in_r_ARREADY, ap_reg_ioackin_in_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_in_r_ARREADY)) then 
            ap_sig_ioackin_in_r_ARREADY <= in_r_ARREADY;
        else 
            ap_sig_ioackin_in_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_out_r_AWREADY_assign_proc : process(out_r_AWREADY, ap_reg_ioackin_out_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_r_AWREADY)) then 
            ap_sig_ioackin_out_r_AWREADY <= out_r_AWREADY;
        else 
            ap_sig_ioackin_out_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_out_r_WREADY_assign_proc : process(out_r_WREADY, ap_reg_ioackin_out_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_r_WREADY)) then 
            ap_sig_ioackin_out_r_WREADY <= out_r_WREADY;
        else 
            ap_sig_ioackin_out_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_279_p2 <= std_logic_vector(unsigned(local_buffer_q1) + unsigned(local_buffer_q0));
    grp_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_309));
    grp_fu_323_p4 <= grp_fu_317_p2(31 downto 1);
    grp_fu_451_p0 <= ap_const_lv65_155555556(34 - 1 downto 0);
    i1_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_256),32));
    i2_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_268),32));
    i_1_fu_383_p2 <= std_logic_vector(unsigned(i_reg_245) + unsigned(ap_const_lv31_1));
    i_2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_418_p2),32));
    i_2_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i1_reg_256));
    i_3_fu_593_p2 <= std_logic_vector(unsigned(i2_reg_268) + unsigned(ap_const_lv31_1));
    i_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_245),32));
    in_offset1_fu_333_p4 <= in_offset(31 downto 2);

    in_r_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_in_r_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_in_r_ARREADY))) then 
            in_r_ARVALID <= ap_const_logic_1;
        else 
            in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_640, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_reg_640 = ap_const_lv1_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            in_r_RREADY <= ap_const_logic_1;
        else 
            in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_in_r_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_640)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (tmp_reg_640 = ap_const_lv1_1))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    local_buffer_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state26, ap_reg_pp0_iter1_i_cast_reg_635, tmp_2_reg_654, ap_CS_fsm_state12, tmp_3_fu_398_p2, ap_CS_fsm_state23, ap_enable_reg_pp0_iter2, ap_CS_fsm_state19, tmp_4_cast_fu_413_p1, tmp_9_cast_fu_513_p1, tmp_12_cast_fu_579_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            local_buffer_address0 <= tmp_12_cast_fu_579_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            local_buffer_address0 <= tmp_2_reg_654(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            local_buffer_address0 <= tmp_9_cast_fu_513_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_3_fu_398_p2 = ap_const_lv1_0))) then 
            local_buffer_address0 <= ap_const_lv32_0(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_3_fu_398_p2))) then 
            local_buffer_address0 <= tmp_4_cast_fu_413_p1(11 - 1 downto 0);
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            local_buffer_address0 <= ap_reg_pp0_iter1_i_cast_reg_635(11 - 1 downto 0);
        else 
            local_buffer_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    local_buffer_address1_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state13, ap_CS_fsm_pp1_stage0, i1_cast_reg_665, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_enable_reg_pp1_iter0, i_2_cast_fu_424_p1, ap_CS_fsm_state22, tmp_5_cast_fu_548_p1, tmp_14_cast_fu_609_p1)
    begin
        if (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            local_buffer_address1 <= tmp_14_cast_fu_609_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            local_buffer_address1 <= tmp_5_cast_fu_548_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            local_buffer_address1 <= ap_const_lv32_400(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            local_buffer_address1 <= i1_cast_reg_665(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            local_buffer_address1 <= i_2_cast_fu_424_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            local_buffer_address1 <= ap_const_lv32_1(11 - 1 downto 0);
        else 
            local_buffer_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    local_buffer_ce0_assign_proc : process(ap_CS_fsm_state26, ap_block_pp0_stage0_11001, ap_CS_fsm_state12, tmp_3_fu_398_p2, ap_CS_fsm_state23, ap_enable_reg_pp0_iter2, ap_sig_ioackin_out_r_AWREADY, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_3_fu_398_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_3_fu_398_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            local_buffer_ce0 <= ap_const_logic_1;
        else 
            local_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_buffer_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_enable_reg_pp1_iter0, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            local_buffer_ce1 <= ap_const_logic_1;
        else 
            local_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_buffer_d0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state26, in_addr_read_reg_649, ap_enable_reg_pp0_iter2, ap_CS_fsm_state19, tmp_8_fu_502_p3, tmp_11_fu_567_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            local_buffer_d0 <= tmp_11_fu_567_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            local_buffer_d0 <= tmp_8_fu_502_p3;
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            local_buffer_d0 <= in_addr_read_reg_649;
        else 
            local_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    local_buffer_d1 <= 
        p_neg_t5_reg_749 when (tmp_30_reg_744(0) = '1') else 
        tmp_23_fu_528_p1;

    local_buffer_we0_assign_proc : process(ap_CS_fsm_state26, ap_block_pp0_stage0_11001, ap_reg_pp0_iter1_tmp_reg_640, ap_enable_reg_pp0_iter2, ap_sig_ioackin_out_r_AWREADY, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_sig_ioackin_out_r_AWREADY = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_reg_640)))) then 
            local_buffer_we0 <= ap_const_logic_1;
        else 
            local_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_buffer_we1_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            local_buffer_we1 <= ap_const_logic_1;
        else 
            local_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    neg_mul_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_724));
    neg_ti_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_21_fu_489_p3));
    out_offset3_fu_354_p4 <= out_offset(31 downto 2);

    out_r_AWVALID_assign_proc : process(ap_CS_fsm_state26, ap_reg_ioackin_out_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_logic_0 = ap_reg_ioackin_out_r_AWREADY))) then 
            out_r_AWVALID <= ap_const_logic_1;
        else 
            out_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_BREADY_assign_proc : process(ap_CS_fsm_state34, out_r_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (out_r_BVALID = ap_const_logic_1))) then 
            out_r_BREADY <= ap_const_logic_1;
        else 
            out_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    out_r_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_tmp_13_reg_779, ap_reg_ioackin_out_r_WREADY, ap_block_pp1_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_13_reg_779) and (ap_block_pp1_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_out_r_WREADY))) then 
            out_r_WVALID <= ap_const_logic_1;
        else 
            out_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_AW_assign_proc : process(m_axi_out_r_AWREADY, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            out_r_blk_n_AW <= m_axi_out_r_AWREADY;
        else 
            out_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_B_assign_proc : process(m_axi_out_r_BVALID, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            out_r_blk_n_B <= m_axi_out_r_BVALID;
        else 
            out_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_W_assign_proc : process(m_axi_out_r_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_reg_pp1_iter1_tmp_13_reg_779)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp1_iter1_tmp_13_reg_779))) then 
            out_r_blk_n_W <= m_axi_out_r_WREADY;
        else 
            out_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    p_neg_t5_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_22_fu_518_p1));
    p_neg_t_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_24_fu_553_p1));
    tmp1_fu_429_p2 <= std_logic_vector(unsigned(local_buffer_load_2_reg_703) + unsigned(reg_303));
    tmp_11_fu_567_p3 <= 
        p_neg_t_reg_774 when (tmp_32_reg_769(0) = '1') else 
        tmp_25_fu_563_p1;
    tmp_12_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_574_p2),32));
    tmp_12_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv13_3FF) + unsigned(tmp_31_reg_759));
    tmp_13_fu_588_p2 <= "1" when (signed(i2_cast_fu_584_p1) < signed(size)) else "0";
        tmp_14_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_603_p2),32));

    tmp_14_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_33_fu_599_p1));
    tmp_18_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_offset1_fu_333_p4),32));
        tmp_19_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_472_p4),32));

        tmp_20_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_reg_729),32));

    tmp_21_fu_489_p3 <= 
        tmp_19_fu_482_p1 when (tmp_27_reg_713(0) = '1') else 
        tmp_20_fu_486_p1;
    tmp_22_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_323_p4),32));
    tmp_23_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_313),32));
    tmp_24_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_323_p4),32));
    tmp_25_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_313),32));
    tmp_26_fu_403_p1 <= i1_reg_256(13 - 1 downto 0);
    tmp_28_fu_472_p4 <= neg_mul_fu_467_p2(64 downto 34);
    tmp_2_fu_389_p2 <= std_logic_vector(unsigned(size) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_31_fu_539_p1 <= size(13 - 1 downto 0);
    tmp_33_fu_599_p1 <= i2_reg_268(13 - 1 downto 0);
    tmp_3_fu_398_p2 <= "1" when (signed(i1_cast_fu_394_p1) < signed(tmp_2_reg_654)) else "0";
    tmp_4_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_407_p2),32));
    tmp_4_fu_407_p2 <= std_logic_vector(signed(ap_const_lv13_1FFF) + signed(tmp_26_fu_403_p1));
    tmp_5_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_542_p2),32));
    tmp_5_fu_542_p2 <= std_logic_vector(signed(ap_const_lv13_1FFE) + signed(tmp_31_fu_539_p1));
    tmp_6_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_offset3_fu_354_p4),32));
    tmp_7_fu_434_p2 <= std_logic_vector(unsigned(local_buffer_q1) + unsigned(tmp1_fu_429_p2));
    tmp_8_fu_502_p3 <= 
        neg_ti_reg_739 when (tmp_27_reg_713(0) = '1') else 
        tmp_20_reg_734;
    tmp_9_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_508_p2),32));
    tmp_9_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv13_400) + unsigned(tmp_26_reg_673));
    tmp_fu_378_p2 <= "1" when (signed(i_cast_fu_374_p1) < signed(size)) else "0";
end behav;
