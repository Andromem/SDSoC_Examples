-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_accel is
generic (
    C_M_AXI_A_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_C_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_C_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_a_AWVALID : OUT STD_LOGIC;
    m_axi_a_AWREADY : IN STD_LOGIC;
    m_axi_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_AWUSER_WIDTH-1 downto 0);
    m_axi_a_WVALID : OUT STD_LOGIC;
    m_axi_a_WREADY : IN STD_LOGIC;
    m_axi_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH/8-1 downto 0);
    m_axi_a_WLAST : OUT STD_LOGIC;
    m_axi_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_WUSER_WIDTH-1 downto 0);
    m_axi_a_ARVALID : OUT STD_LOGIC;
    m_axi_a_ARREADY : IN STD_LOGIC;
    m_axi_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ADDR_WIDTH-1 downto 0);
    m_axi_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_ARUSER_WIDTH-1 downto 0);
    m_axi_a_RVALID : IN STD_LOGIC;
    m_axi_a_RREADY : OUT STD_LOGIC;
    m_axi_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_DATA_WIDTH-1 downto 0);
    m_axi_a_RLAST : IN STD_LOGIC;
    m_axi_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_RUSER_WIDTH-1 downto 0);
    m_axi_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BVALID : IN STD_LOGIC;
    m_axi_a_BREADY : OUT STD_LOGIC;
    m_axi_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_ID_WIDTH-1 downto 0);
    m_axi_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUSER_WIDTH-1 downto 0);
    m_axi_b_AWVALID : OUT STD_LOGIC;
    m_axi_b_AWREADY : IN STD_LOGIC;
    m_axi_b_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_b_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_b_WVALID : OUT STD_LOGIC;
    m_axi_b_WREADY : IN STD_LOGIC;
    m_axi_b_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_b_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_b_WLAST : OUT STD_LOGIC;
    m_axi_b_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_b_ARVALID : OUT STD_LOGIC;
    m_axi_b_ARREADY : IN STD_LOGIC;
    m_axi_b_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_b_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_b_RVALID : IN STD_LOGIC;
    m_axi_b_RREADY : OUT STD_LOGIC;
    m_axi_b_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_b_RLAST : IN STD_LOGIC;
    m_axi_b_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_BVALID : IN STD_LOGIC;
    m_axi_b_BREADY : OUT STD_LOGIC;
    m_axi_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_b_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_c_AWVALID : OUT STD_LOGIC;
    m_axi_c_AWREADY : IN STD_LOGIC;
    m_axi_c_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_AWUSER_WIDTH-1 downto 0);
    m_axi_c_WVALID : OUT STD_LOGIC;
    m_axi_c_WREADY : IN STD_LOGIC;
    m_axi_c_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH/8-1 downto 0);
    m_axi_c_WLAST : OUT STD_LOGIC;
    m_axi_c_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_WUSER_WIDTH-1 downto 0);
    m_axi_c_ARVALID : OUT STD_LOGIC;
    m_axi_c_ARREADY : IN STD_LOGIC;
    m_axi_c_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ADDR_WIDTH-1 downto 0);
    m_axi_c_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_c_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_C_ARUSER_WIDTH-1 downto 0);
    m_axi_c_RVALID : IN STD_LOGIC;
    m_axi_c_RREADY : OUT STD_LOGIC;
    m_axi_c_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_C_DATA_WIDTH-1 downto 0);
    m_axi_c_RLAST : IN STD_LOGIC;
    m_axi_c_RID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_RUSER_WIDTH-1 downto 0);
    m_axi_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BVALID : IN STD_LOGIC;
    m_axi_c_BREADY : OUT STD_LOGIC;
    m_axi_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_c_BID : IN STD_LOGIC_VECTOR (C_M_AXI_C_ID_WIDTH-1 downto 0);
    m_axi_c_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_C_BUSER_WIDTH-1 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    b_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    c_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mmult_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_accel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.125001,HLS_SYN_LAT=2425110,HLS_SYN_TPT=none,HLS_SYN_MEM=390,HLS_SYN_DSP=8,HLS_SYN_FF=4502,HLS_SYN_LUT=3157}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal a_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_blk_n_AR : STD_LOGIC;
    signal b_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_6_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_s_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal c_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal a_AWREADY : STD_LOGIC;
    signal a_WREADY : STD_LOGIC;
    signal a_ARVALID : STD_LOGIC;
    signal a_ARREADY : STD_LOGIC;
    signal a_RVALID : STD_LOGIC;
    signal a_RREADY : STD_LOGIC;
    signal a_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal a_RLAST : STD_LOGIC;
    signal a_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal a_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BVALID : STD_LOGIC;
    signal a_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal a_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal a_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_AWREADY : STD_LOGIC;
    signal b_WREADY : STD_LOGIC;
    signal b_ARVALID : STD_LOGIC;
    signal b_ARREADY : STD_LOGIC;
    signal b_RVALID : STD_LOGIC;
    signal b_RREADY : STD_LOGIC;
    signal b_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal b_RLAST : STD_LOGIC;
    signal b_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_BVALID : STD_LOGIC;
    signal b_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_AWVALID : STD_LOGIC;
    signal c_AWREADY : STD_LOGIC;
    signal c_WVALID : STD_LOGIC;
    signal c_WREADY : STD_LOGIC;
    signal c_ARREADY : STD_LOGIC;
    signal c_RVALID : STD_LOGIC;
    signal c_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal c_RLAST : STD_LOGIC;
    signal c_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal c_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_BVALID : STD_LOGIC;
    signal c_BREADY : STD_LOGIC;
    signal c_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal c_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal c_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_size_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sig_ioackin_a_ARREADY : STD_LOGIC;
    signal c_addr_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal b_addr_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufa_addr_reg_833 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_sig_ioackin_b_ARREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal i_1_fu_484_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_841 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmpData_a_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_fu_507_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_1_reg_851 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_1_fu_515_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_1_reg_856 : STD_LOGIC_VECTOR (16 downto 0);
    signal bufb_addr_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state18 : BOOLEAN;
    signal i_2_fu_563_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_869 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmpData_b_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_fu_586_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_4_reg_879 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_4_fu_594_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_4_reg_884 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_cast_fu_610_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_cast_reg_889 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_ioackin_c_AWREADY : STD_LOGIC;
    signal ap_block_state20_io : BOOLEAN;
    signal row_1_fu_623_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_1_reg_898 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_cast_cast_fu_633_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal col_cast_cast_reg_903 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal bufc_addr_1_reg_908 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_652_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_1_reg_917 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state22_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal bufa_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufa_load_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal bufb_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufb_load_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_705_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_3_fu_750_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_969 : STD_LOGIC_VECTOR (30 downto 0);
    signal m_1_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal bufc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmpData_c_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal bufa_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bufa_ce0 : STD_LOGIC;
    signal bufa_we0 : STD_LOGIC;
    signal bufb_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bufb_ce0 : STD_LOGIC;
    signal bufb_we0 : STD_LOGIC;
    signal bufc_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bufc_ce0 : STD_LOGIC;
    signal bufc_we0 : STD_LOGIC;
    signal i_reg_227 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal y_reg_238 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_reg_249 : STD_LOGIC_VECTOR (16 downto 0);
    signal y3_reg_260 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal x2_reg_271 : STD_LOGIC_VECTOR (16 downto 0);
    signal i1_reg_282 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_reg_293 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_304 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal m_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_c_WREADY : STD_LOGIC;
    signal n_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_361 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_cast_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_32_cast_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_a_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_b_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_c_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_c_WREADY : STD_LOGIC := '0';
    signal a_offset1_fu_378_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal c_offset5_fu_399_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal b_offset3_fu_419_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_456_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_fu_460_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_cast_cast_fu_452_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_fu_468_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_cast_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_cast_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_501_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_2_fu_495_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_fu_531_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_cast_fu_535_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal y3_cast_cast_fu_527_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_543_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal i1_cast_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y3_cast_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_3_fu_580_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_3_fu_574_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_606_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_cast_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_637_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal col_cast_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_658_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_662_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_28_fu_672_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_cast_fu_676_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_684_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_718_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_714_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_cast_fu_722_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_730_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal i4_cast_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1184 : BOOLEAN;
    signal ap_condition_514 : BOOLEAN;

    component mmult_accel_mul_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_accel_bufa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_accel_a_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_accel_b_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_accel_c_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mmult_accel_a_m_axi_U : component mmult_accel_a_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_CACHE_VALUE)
    port map (
        AWVALID => m_axi_a_AWVALID,
        AWREADY => m_axi_a_AWREADY,
        AWADDR => m_axi_a_AWADDR,
        AWID => m_axi_a_AWID,
        AWLEN => m_axi_a_AWLEN,
        AWSIZE => m_axi_a_AWSIZE,
        AWBURST => m_axi_a_AWBURST,
        AWLOCK => m_axi_a_AWLOCK,
        AWCACHE => m_axi_a_AWCACHE,
        AWPROT => m_axi_a_AWPROT,
        AWQOS => m_axi_a_AWQOS,
        AWREGION => m_axi_a_AWREGION,
        AWUSER => m_axi_a_AWUSER,
        WVALID => m_axi_a_WVALID,
        WREADY => m_axi_a_WREADY,
        WDATA => m_axi_a_WDATA,
        WSTRB => m_axi_a_WSTRB,
        WLAST => m_axi_a_WLAST,
        WID => m_axi_a_WID,
        WUSER => m_axi_a_WUSER,
        ARVALID => m_axi_a_ARVALID,
        ARREADY => m_axi_a_ARREADY,
        ARADDR => m_axi_a_ARADDR,
        ARID => m_axi_a_ARID,
        ARLEN => m_axi_a_ARLEN,
        ARSIZE => m_axi_a_ARSIZE,
        ARBURST => m_axi_a_ARBURST,
        ARLOCK => m_axi_a_ARLOCK,
        ARCACHE => m_axi_a_ARCACHE,
        ARPROT => m_axi_a_ARPROT,
        ARQOS => m_axi_a_ARQOS,
        ARREGION => m_axi_a_ARREGION,
        ARUSER => m_axi_a_ARUSER,
        RVALID => m_axi_a_RVALID,
        RREADY => m_axi_a_RREADY,
        RDATA => m_axi_a_RDATA,
        RLAST => m_axi_a_RLAST,
        RID => m_axi_a_RID,
        RUSER => m_axi_a_RUSER,
        RRESP => m_axi_a_RRESP,
        BVALID => m_axi_a_BVALID,
        BREADY => m_axi_a_BREADY,
        BRESP => m_axi_a_BRESP,
        BID => m_axi_a_BID,
        BUSER => m_axi_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => a_ARVALID,
        I_ARREADY => a_ARREADY,
        I_ARADDR => tmp_16_fu_388_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => matrix_size_reg_799,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => a_RVALID,
        I_RREADY => a_RREADY,
        I_RDATA => a_RDATA,
        I_RID => a_RID,
        I_RUSER => a_RUSER,
        I_RRESP => a_RRESP,
        I_RLAST => a_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => a_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => a_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => a_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => a_BRESP,
        I_BID => a_BID,
        I_BUSER => a_BUSER);

    mmult_accel_b_m_axi_U : component mmult_accel_b_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b_AWVALID,
        AWREADY => m_axi_b_AWREADY,
        AWADDR => m_axi_b_AWADDR,
        AWID => m_axi_b_AWID,
        AWLEN => m_axi_b_AWLEN,
        AWSIZE => m_axi_b_AWSIZE,
        AWBURST => m_axi_b_AWBURST,
        AWLOCK => m_axi_b_AWLOCK,
        AWCACHE => m_axi_b_AWCACHE,
        AWPROT => m_axi_b_AWPROT,
        AWQOS => m_axi_b_AWQOS,
        AWREGION => m_axi_b_AWREGION,
        AWUSER => m_axi_b_AWUSER,
        WVALID => m_axi_b_WVALID,
        WREADY => m_axi_b_WREADY,
        WDATA => m_axi_b_WDATA,
        WSTRB => m_axi_b_WSTRB,
        WLAST => m_axi_b_WLAST,
        WID => m_axi_b_WID,
        WUSER => m_axi_b_WUSER,
        ARVALID => m_axi_b_ARVALID,
        ARREADY => m_axi_b_ARREADY,
        ARADDR => m_axi_b_ARADDR,
        ARID => m_axi_b_ARID,
        ARLEN => m_axi_b_ARLEN,
        ARSIZE => m_axi_b_ARSIZE,
        ARBURST => m_axi_b_ARBURST,
        ARLOCK => m_axi_b_ARLOCK,
        ARCACHE => m_axi_b_ARCACHE,
        ARPROT => m_axi_b_ARPROT,
        ARQOS => m_axi_b_ARQOS,
        ARREGION => m_axi_b_ARREGION,
        ARUSER => m_axi_b_ARUSER,
        RVALID => m_axi_b_RVALID,
        RREADY => m_axi_b_RREADY,
        RDATA => m_axi_b_RDATA,
        RLAST => m_axi_b_RLAST,
        RID => m_axi_b_RID,
        RUSER => m_axi_b_RUSER,
        RRESP => m_axi_b_RRESP,
        BVALID => m_axi_b_BVALID,
        BREADY => m_axi_b_BREADY,
        BRESP => m_axi_b_BRESP,
        BID => m_axi_b_BID,
        BUSER => m_axi_b_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => b_ARVALID,
        I_ARREADY => b_ARREADY,
        I_ARADDR => b_addr_reg_820,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => matrix_size_reg_799,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => b_RVALID,
        I_RREADY => b_RREADY,
        I_RDATA => b_RDATA,
        I_RID => b_RID,
        I_RUSER => b_RUSER,
        I_RRESP => b_RRESP,
        I_RLAST => b_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => b_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => b_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => b_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => b_BRESP,
        I_BID => b_BID,
        I_BUSER => b_BUSER);

    mmult_accel_c_m_axi_U : component mmult_accel_c_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_C_CACHE_VALUE)
    port map (
        AWVALID => m_axi_c_AWVALID,
        AWREADY => m_axi_c_AWREADY,
        AWADDR => m_axi_c_AWADDR,
        AWID => m_axi_c_AWID,
        AWLEN => m_axi_c_AWLEN,
        AWSIZE => m_axi_c_AWSIZE,
        AWBURST => m_axi_c_AWBURST,
        AWLOCK => m_axi_c_AWLOCK,
        AWCACHE => m_axi_c_AWCACHE,
        AWPROT => m_axi_c_AWPROT,
        AWQOS => m_axi_c_AWQOS,
        AWREGION => m_axi_c_AWREGION,
        AWUSER => m_axi_c_AWUSER,
        WVALID => m_axi_c_WVALID,
        WREADY => m_axi_c_WREADY,
        WDATA => m_axi_c_WDATA,
        WSTRB => m_axi_c_WSTRB,
        WLAST => m_axi_c_WLAST,
        WID => m_axi_c_WID,
        WUSER => m_axi_c_WUSER,
        ARVALID => m_axi_c_ARVALID,
        ARREADY => m_axi_c_ARREADY,
        ARADDR => m_axi_c_ARADDR,
        ARID => m_axi_c_ARID,
        ARLEN => m_axi_c_ARLEN,
        ARSIZE => m_axi_c_ARSIZE,
        ARBURST => m_axi_c_ARBURST,
        ARLOCK => m_axi_c_ARLOCK,
        ARCACHE => m_axi_c_ARCACHE,
        ARPROT => m_axi_c_ARPROT,
        ARQOS => m_axi_c_ARQOS,
        ARREGION => m_axi_c_ARREGION,
        ARUSER => m_axi_c_ARUSER,
        RVALID => m_axi_c_RVALID,
        RREADY => m_axi_c_RREADY,
        RDATA => m_axi_c_RDATA,
        RLAST => m_axi_c_RLAST,
        RID => m_axi_c_RID,
        RUSER => m_axi_c_RUSER,
        RRESP => m_axi_c_RRESP,
        BVALID => m_axi_c_BVALID,
        BREADY => m_axi_c_BREADY,
        BRESP => m_axi_c_BRESP,
        BID => m_axi_c_BID,
        BUSER => m_axi_c_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => c_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => c_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => c_RDATA,
        I_RID => c_RID,
        I_RUSER => c_RUSER,
        I_RRESP => c_RRESP,
        I_RLAST => c_RLAST,
        I_AWVALID => c_AWVALID,
        I_AWREADY => c_AWREADY,
        I_AWADDR => c_addr_reg_815,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => matrix_size_reg_799,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => c_WVALID,
        I_WREADY => c_WREADY,
        I_WDATA => tmpData_c_reg_984,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => c_BVALID,
        I_BREADY => c_BREADY,
        I_BRESP => c_BRESP,
        I_BID => c_BID,
        I_BUSER => c_BUSER);

    bufa_U : component mmult_accel_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufa_address0,
        ce0 => bufa_ce0,
        we0 => bufa_we0,
        d0 => tmpData_a_reg_846,
        q0 => bufa_q0);

    bufb_U : component mmult_accel_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufb_address0,
        ce0 => bufb_ce0,
        we0 => bufb_we0,
        d0 => tmpData_b_reg_874,
        q0 => bufb_q0);

    bufc_U : component mmult_accel_bufa
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bufc_address0,
        ce0 => bufc_ce0,
        we0 => bufc_we0,
        d0 => result_reg_315,
        q0 => bufc_q0);

    mmult_accel_mul_3bkb_U1 : component mmult_accel_mul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => size,
        din1 => size,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    mmult_accel_mul_3bkb_U2 : component mmult_accel_mul_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bufb_load_reg_946,
        din1 => bufa_load_reg_941,
        ce => ap_const_logic_1,
        dout => grp_fu_705_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state22))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond1_fu_647_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state22)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state22 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond1_fu_647_p2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_a_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_a_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = a_ARREADY)) then 
                        ap_reg_ioackin_a_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_b_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_b_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_0))) then
                    if ((ap_condition_514 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_b_ARREADY <= ap_const_logic_0;
                    elsif ((ap_condition_1184 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_b_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_c_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_c_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2))) then
                    if ((ap_block_state20_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_c_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = c_AWREADY)) then 
                        ap_reg_ioackin_c_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_c_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_c_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    if ((ap_sig_ioackin_c_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_c_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = c_WREADY)) then 
                        ap_reg_ioackin_c_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    col_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                col_reg_304 <= col_1_reg_917;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_s_fu_618_p2))) then 
                col_reg_304 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    i1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i1_reg_282 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i1_reg_282 <= i_2_reg_869;
            end if; 
        end if;
    end process;

    i4_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_block_state20_io = ap_const_boolean_0))) then 
                i4_reg_361 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_c_WREADY = ap_const_logic_1))) then 
                i4_reg_361 <= i_3_reg_969;
            end if; 
        end if;
    end process;

    i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_227 <= i_1_reg_841;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_227 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_fu_694_p2))) then 
                k_reg_328 <= k_1_fu_699_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond1_fu_647_p2))) then 
                k_reg_328 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_block_state20_io = ap_const_boolean_0))) then 
                m_reg_339 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_c_WREADY = ap_const_logic_1))) then 
                m_reg_339 <= m_1_reg_974;
            end if; 
        end if;
    end process;

    n_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_block_state20_io = ap_const_boolean_0))) then 
                n_reg_350 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_c_WREADY = ap_const_logic_1))) then 
                n_reg_350 <= n_1_reg_979;
            end if; 
        end if;
    end process;

    result_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_reg_932))) then 
                result_reg_315 <= result_1_fu_709_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond1_fu_647_p2))) then 
                result_reg_315 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))) and (ap_const_lv1_0 = tmp_6_fu_558_p2))) then 
                row_reg_293 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond1_fu_647_p2))) then 
                row_reg_293 <= row_1_reg_898;
            end if; 
        end if;
    end process;

    x2_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                x2_reg_271 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x2_reg_271 <= x_4_reg_884;
            end if; 
        end if;
    end process;

    x_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                x_reg_249 <= x_1_reg_856;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                x_reg_249 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    y3_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                y3_reg_260 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                y3_reg_260 <= y_4_reg_879;
            end if; 
        end if;
    end process;

    y_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                y_reg_238 <= y_1_reg_851;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                y_reg_238 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_reg_932 <= exitcond_reg_932;
                exitcond_reg_932 <= exitcond_fu_694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_exitcond_reg_932 <= ap_reg_pp0_iter1_exitcond_reg_932;
                ap_reg_pp0_iter3_exitcond_reg_932 <= ap_reg_pp0_iter2_exitcond_reg_932;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    b_addr_reg_820(29 downto 0) <= tmp_15_fu_429_p1(29 downto 0);
                    c_addr_reg_815(29 downto 0) <= tmp_14_fu_409_p1(29 downto 0);
                tmp_reg_826 <= tmp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io))))) then
                bufa_addr_reg_833 <= tmp_19_cast_fu_474_p1(16 - 1 downto 0);
                i_1_reg_841 <= i_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_reg_932))) then
                bufa_load_reg_941 <= bufa_q0;
                bufb_load_reg_946 <= bufb_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))))) then
                bufb_addr_reg_861 <= tmp_22_cast_fu_549_p1(16 - 1 downto 0);
                i_2_reg_869 <= i_2_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                bufc_addr_1_reg_908 <= tmp_25_cast_fu_642_p1(16 - 1 downto 0);
                col_1_reg_917 <= col_1_fu_652_p2;
                    col_cast_cast_reg_903(16 downto 0) <= col_cast_cast_fu_633_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_3_reg_969 <= i_3_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = tmp_3_fu_745_p2))) then
                m_1_reg_974 <= m_1_fu_773_p3;
                n_1_reg_979 <= n_1_fu_781_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                matrix_size_reg_799 <= grp_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0))) then
                row_1_reg_898 <= row_1_fu_623_p2;
                    tmp_24_cast_reg_889(17 downto 8) <= tmp_24_cast_fu_610_p3(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_1) and not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io))))) then
                tmpData_a_reg_846 <= a_RDATA;
                x_1_reg_856 <= x_1_fu_515_p3;
                y_1_reg_851 <= y_1_fu_507_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = tmp_6_fu_558_p2) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))))) then
                tmpData_b_reg_874 <= b_RDATA;
                x_4_reg_884 <= x_4_fu_594_p3;
                y_4_reg_879 <= y_4_fu_586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmpData_c_reg_984 <= bufc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_reg_932))) then
                tmp_5_reg_951 <= grp_fu_705_p2;
            end if;
        end if;
    end process;
    c_addr_reg_815(31 downto 30) <= "00";
    b_addr_reg_820(31 downto 30) <= "00";
    tmp_24_cast_reg_889(7 downto 0) <= "00000000";
    col_cast_cast_reg_903(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, tmp_1_fu_479_p2, ap_CS_fsm_state18, tmp_6_fu_558_p2, ap_CS_fsm_state20, tmp_s_fu_618_p2, ap_CS_fsm_state30, ap_CS_fsm_state34, a_RVALID, b_RVALID, c_BVALID, ap_sig_ioackin_a_ARREADY, ap_block_state10_io, ap_block_state20_io, ap_CS_fsm_state21, exitcond1_fu_647_p2, exitcond_fu_694_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_CS_fsm_state28, tmp_3_fu_745_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_sig_ioackin_c_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_a_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_0) and not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_1) and not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))) and (ap_const_lv1_0 = tmp_6_fu_558_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = tmp_6_fu_558_p2) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_block_state20_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_io = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_s_fu_618_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond1_fu_647_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_694_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_fu_694_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = tmp_3_fu_745_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sig_ioackin_c_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (c_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_a_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_a_ARREADY))) then 
            a_ARVALID <= ap_const_logic_1;
        else 
            a_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    a_RREADY_assign_proc : process(ap_CS_fsm_state10, tmp_1_fu_479_p2, a_RVALID, ap_block_state10_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_1) and not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io))))) then 
            a_RREADY <= ap_const_logic_1;
        else 
            a_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    a_blk_n_AR_assign_proc : process(m_axi_a_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_blk_n_AR <= m_axi_a_ARREADY;
        else 
            a_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    a_blk_n_R_assign_proc : process(m_axi_a_RVALID, ap_CS_fsm_state10, tmp_1_fu_479_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_1))) then 
            a_blk_n_R <= m_axi_a_RVALID;
        else 
            a_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    a_offset1_fu_378_p4 <= a_offset(31 downto 2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(25);
    ap_CS_fsm_state34 <= ap_CS_fsm(29);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_assign_proc : process(tmp_1_fu_479_p2, a_RVALID)
    begin
                ap_block_state10 <= ((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID));
    end process;


    ap_block_state10_io_assign_proc : process(tmp_1_fu_479_p2, ap_sig_ioackin_b_ARREADY)
    begin
                ap_block_state10_io <= ((tmp_1_fu_479_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_b_ARREADY));
    end process;


    ap_block_state18_assign_proc : process(tmp_6_fu_558_p2, b_RVALID)
    begin
                ap_block_state18 <= ((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID));
    end process;


    ap_block_state20_io_assign_proc : process(tmp_s_fu_618_p2, ap_sig_ioackin_c_AWREADY)
    begin
                ap_block_state20_io <= ((ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_const_logic_0 = ap_sig_ioackin_c_AWREADY));
    end process;

        ap_block_state22_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1184_assign_proc : process(tmp_1_fu_479_p2, a_RVALID, b_ARREADY)
    begin
                ap_condition_1184 <= ((ap_const_logic_1 = b_ARREADY) and not(((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID))));
    end process;


    ap_condition_514_assign_proc : process(tmp_1_fu_479_p2, a_RVALID, ap_block_state10_io)
    begin
                ap_condition_514 <= not((((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io)));
    end process;


    ap_condition_pp0_exit_iter0_state22_assign_proc : process(exitcond_fu_694_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_fu_694_p2)) then 
            ap_condition_pp0_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state34, c_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (c_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, c_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (c_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_a_ARREADY_assign_proc : process(a_ARREADY, ap_reg_ioackin_a_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_a_ARREADY)) then 
            ap_sig_ioackin_a_ARREADY <= a_ARREADY;
        else 
            ap_sig_ioackin_a_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_b_ARREADY_assign_proc : process(b_ARREADY, ap_reg_ioackin_b_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_b_ARREADY)) then 
            ap_sig_ioackin_b_ARREADY <= b_ARREADY;
        else 
            ap_sig_ioackin_b_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_c_AWREADY_assign_proc : process(c_AWREADY, ap_reg_ioackin_c_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_c_AWREADY)) then 
            ap_sig_ioackin_c_AWREADY <= c_AWREADY;
        else 
            ap_sig_ioackin_c_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_c_WREADY_assign_proc : process(c_WREADY, ap_reg_ioackin_c_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_c_WREADY)) then 
            ap_sig_ioackin_c_WREADY <= c_WREADY;
        else 
            ap_sig_ioackin_c_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    b_ARVALID_assign_proc : process(ap_CS_fsm_state10, tmp_1_fu_479_p2, a_RVALID, ap_reg_ioackin_b_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_0) and not(((tmp_1_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_0 = a_RVALID))) and (ap_const_logic_0 = ap_reg_ioackin_b_ARREADY))) then 
            b_ARVALID <= ap_const_logic_1;
        else 
            b_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    b_RREADY_assign_proc : process(ap_CS_fsm_state18, tmp_6_fu_558_p2, b_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = tmp_6_fu_558_p2) and not(((ap_const_lv1_1 = tmp_6_fu_558_p2) and (ap_const_logic_0 = b_RVALID))))) then 
            b_RREADY <= ap_const_logic_1;
        else 
            b_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    b_blk_n_AR_assign_proc : process(m_axi_b_ARREADY, ap_CS_fsm_state10, tmp_1_fu_479_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_479_p2 = ap_const_lv1_0))) then 
            b_blk_n_AR <= m_axi_b_ARREADY;
        else 
            b_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    b_blk_n_R_assign_proc : process(m_axi_b_RVALID, ap_CS_fsm_state18, tmp_6_fu_558_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = tmp_6_fu_558_p2))) then 
            b_blk_n_R <= m_axi_b_RVALID;
        else 
            b_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    b_offset3_fu_419_p4 <= b_offset(31 downto 2);

    bufa_address0_assign_proc : process(bufa_addr_reg_833, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state11, tmp_29_cast_fu_667_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            bufa_address0 <= tmp_29_cast_fu_667_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bufa_address0 <= bufa_addr_reg_833;
        else 
            bufa_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bufa_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            bufa_ce0 <= ap_const_logic_1;
        else 
            bufa_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bufa_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            bufa_we0 <= ap_const_logic_1;
        else 
            bufa_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bufb_address0_assign_proc : process(bufb_addr_reg_861, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state19, ap_block_pp0_stage0, tmp_32_cast_fu_689_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            bufb_address0 <= tmp_32_cast_fu_689_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            bufb_address0 <= bufb_addr_reg_861;
        else 
            bufb_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bufb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            bufb_ce0 <= ap_const_logic_1;
        else 
            bufb_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bufb_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            bufb_we0 <= ap_const_logic_1;
        else 
            bufb_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bufc_address0_assign_proc : process(bufc_addr_1_reg_908, ap_CS_fsm_state28, ap_CS_fsm_state27, tmp_28_cast_fu_736_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            bufc_address0 <= tmp_28_cast_fu_736_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            bufc_address0 <= bufc_addr_1_reg_908;
        else 
            bufc_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bufc_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            bufc_ce0 <= ap_const_logic_1;
        else 
            bufc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bufc_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            bufc_we0 <= ap_const_logic_1;
        else 
            bufc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_AWVALID_assign_proc : process(ap_CS_fsm_state20, tmp_s_fu_618_p2, ap_reg_ioackin_c_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2) and (ap_const_logic_0 = ap_reg_ioackin_c_AWREADY))) then 
            c_AWVALID <= ap_const_logic_1;
        else 
            c_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_BREADY_assign_proc : process(ap_CS_fsm_state34, c_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) and (c_BVALID = ap_const_logic_1))) then 
            c_BREADY <= ap_const_logic_1;
        else 
            c_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    c_WVALID_assign_proc : process(ap_CS_fsm_state30, ap_reg_ioackin_c_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_logic_0 = ap_reg_ioackin_c_WREADY))) then 
            c_WVALID <= ap_const_logic_1;
        else 
            c_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    c_blk_n_AW_assign_proc : process(m_axi_c_AWREADY, ap_CS_fsm_state20, tmp_s_fu_618_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_s_fu_618_p2))) then 
            c_blk_n_AW <= m_axi_c_AWREADY;
        else 
            c_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    c_blk_n_B_assign_proc : process(m_axi_c_BVALID, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            c_blk_n_B <= m_axi_c_BVALID;
        else 
            c_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    c_blk_n_W_assign_proc : process(m_axi_c_WREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c_blk_n_W <= m_axi_c_WREADY;
        else 
            c_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    c_offset5_fu_399_p4 <= c_offset(31 downto 2);
    col_1_fu_652_p2 <= std_logic_vector(unsigned(col_reg_304) + unsigned(ap_const_lv17_1));
    col_cast_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_304),18));
    col_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_304),32));
    exitcond1_fu_647_p1 <= size;
    exitcond1_fu_647_p2 <= "1" when (col_cast_fu_629_p1 = exitcond1_fu_647_p1) else "0";
    exitcond_fu_694_p1 <= size;
    exitcond_fu_694_p2 <= "1" when (k_reg_328 = exitcond_fu_694_p1) else "0";
    i1_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_282),32));
    i4_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_361),32));
    i_1_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_reg_227));
    i_2_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i1_reg_282));
    i_3_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i4_reg_361));
    i_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_227),32));
    k_1_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_reg_328));
    m_1_fu_773_p3 <= 
        m_2_fu_761_p2 when (tmp_4_fu_756_p2(0) = '1') else 
        m_reg_339;
    m_2_fu_761_p2 <= std_logic_vector(unsigned(m_reg_339) + unsigned(ap_const_lv32_1));
    n_1_fu_781_p3 <= 
        ap_const_lv32_0 when (tmp_4_fu_756_p2(0) = '1') else 
        n_2_fu_767_p2;
    n_2_fu_767_p2 <= std_logic_vector(unsigned(n_reg_350) + unsigned(ap_const_lv32_1));
    result_1_fu_709_p2 <= std_logic_vector(unsigned(tmp_5_reg_951) + unsigned(result_reg_315));
    row_1_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(row_reg_293));
    row_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_293),32));
    tmp_14_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_offset5_fu_399_p4),32));
    tmp_15_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_offset3_fu_419_p4),32));
    tmp_16_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_offset1_fu_378_p4),32));
    tmp_17_fu_456_p1 <= x_reg_249(10 - 1 downto 0);
    tmp_18_cast_fu_460_p3 <= (tmp_17_fu_456_p1 & ap_const_lv8_0);
    tmp_18_fu_468_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_460_p3) + unsigned(y_cast_cast_fu_452_p1));
    tmp_19_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_468_p2),32));
    tmp_19_fu_531_p1 <= x2_reg_271(10 - 1 downto 0);
    tmp_1_fu_479_p2 <= "1" when (signed(i_cast_fu_444_p1) < signed(matrix_size_reg_799)) else "0";
    tmp_20_fu_543_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_535_p3) + unsigned(y3_cast_cast_fu_527_p1));
    tmp_21_cast_fu_535_p3 <= (tmp_19_fu_531_p1 & ap_const_lv8_0);
    tmp_21_fu_606_p1 <= row_reg_293(10 - 1 downto 0);
    tmp_22_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_543_p2),32));
    tmp_22_fu_637_p2 <= std_logic_vector(unsigned(tmp_24_cast_reg_889) + unsigned(col_cast_cast_fu_633_p1));
    tmp_23_fu_714_p1 <= n_reg_350(18 - 1 downto 0);
    tmp_24_cast_fu_610_p3 <= (tmp_21_fu_606_p1 & ap_const_lv8_0);
    tmp_24_fu_718_p1 <= m_reg_339(10 - 1 downto 0);
    tmp_25_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_637_p2),32));
    tmp_25_fu_730_p2 <= std_logic_vector(unsigned(tmp_23_fu_714_p1) + unsigned(tmp_27_cast_fu_722_p3));
    tmp_26_fu_658_p1 <= k_reg_328(18 - 1 downto 0);
    tmp_27_cast_fu_722_p3 <= (tmp_24_fu_718_p1 & ap_const_lv8_0);
    tmp_27_fu_662_p2 <= std_logic_vector(unsigned(tmp_26_fu_658_p1) + unsigned(tmp_24_cast_reg_889));
    tmp_28_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_730_p2),32));
    tmp_28_fu_672_p1 <= k_reg_328(10 - 1 downto 0);
    tmp_29_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_662_p2),32));
    tmp_29_fu_684_p2 <= std_logic_vector(unsigned(col_cast_cast_reg_903) + unsigned(tmp_31_cast_fu_676_p3));
    tmp_2_fu_490_p2 <= "1" when (y_cast_fu_448_p1 = tmp_reg_826) else "0";
    tmp_31_cast_fu_676_p3 <= (tmp_28_fu_672_p1 & ap_const_lv8_0);
    tmp_32_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_684_p2),32));
    tmp_3_fu_745_p2 <= "1" when (signed(i4_cast_fu_741_p1) < signed(matrix_size_reg_799)) else "0";
    tmp_4_fu_756_p2 <= "1" when (n_reg_350 = tmp_reg_826) else "0";
    tmp_6_fu_558_p2 <= "1" when (signed(i1_cast_fu_554_p1) < signed(matrix_size_reg_799)) else "0";
    tmp_7_fu_569_p2 <= "1" when (y3_cast_fu_523_p1 = tmp_reg_826) else "0";
    tmp_fu_439_p0 <= size;
    tmp_fu_439_p2 <= std_logic_vector(signed(tmp_fu_439_p0) + signed(ap_const_lv32_FFFFFFFF));
    tmp_s_fu_618_p1 <= size;
    tmp_s_fu_618_p2 <= "1" when (signed(row_cast_fu_602_p1) < signed(tmp_s_fu_618_p1)) else "0";
    x_1_fu_515_p3 <= 
        x_2_fu_495_p2 when (tmp_2_fu_490_p2(0) = '1') else 
        x_reg_249;
    x_2_fu_495_p2 <= std_logic_vector(unsigned(x_reg_249) + unsigned(ap_const_lv17_1));
    x_3_fu_574_p2 <= std_logic_vector(unsigned(x2_reg_271) + unsigned(ap_const_lv17_1));
    x_4_fu_594_p3 <= 
        x_3_fu_574_p2 when (tmp_7_fu_569_p2(0) = '1') else 
        x2_reg_271;
    y3_cast_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y3_reg_260),18));
    y3_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y3_reg_260),32));
    y_1_fu_507_p3 <= 
        ap_const_lv17_0 when (tmp_2_fu_490_p2(0) = '1') else 
        y_2_fu_501_p2;
    y_2_fu_501_p2 <= std_logic_vector(unsigned(y_reg_238) + unsigned(ap_const_lv17_1));
    y_3_fu_580_p2 <= std_logic_vector(unsigned(y3_reg_260) + unsigned(ap_const_lv17_1));
    y_4_fu_586_p3 <= 
        ap_const_lv17_0 when (tmp_7_fu_569_p2(0) = '1') else 
        y_3_fu_580_p2;
    y_cast_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_238),18));
    y_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_238),32));
end behav;
